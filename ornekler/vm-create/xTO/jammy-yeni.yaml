#cloud-config
password: ${vm_pass}
chpasswd: { expire: False }
ssh_pwauth: True
hostname: ${vm_uname}
manage_etc_hosts: true

write_files:
  - path: /etc/cloud/cloud.cfg.d/99-custom-networking.cfg
    permissions: '0644'
    content: |
      network: {config: disabled}

  - path: /etc/update-motd.d/99-ulak-message
    permissions: '0755'
    content: |
      #!/bin/bash
      echo ""
      echo "░█░█░█░░░█▀█░█░█░░░█░█░█▀█░█▀▄░█▀▀░█▀▄░█░░░█▀▀░█▀▀░█▄█░█▀▀"
      echo "░█░█░█░░░█▀█░█▀▄░░░█▀█░█▀█░█▀▄░█▀▀░█▀▄░█░░░█▀▀░▀▀█░█░█░█▀▀"
      echo "░▀▀▀░▀▀▀░▀░▀░▀░▀░░░▀░▀░▀░▀░▀▀░░▀▀▀░▀░▀░▀▀▀░▀▀▀░▀▀▀░▀░▀░▀▀▀"
      echo ""
      echo "############################################ GELISTIRICIYE NOT #####################################################"
      echo ""
      echo "* Eğer makineyi yeni oluşturduysanız, programların tam olarak kurulabilmesi için yaklaşık 10 dakika bekleyin!"
      echo "* Arka planda programların kurulumunu izlemek için aşağıdaki komutla günlük kayılarına bakabilirsiniz."
      echo "* sudo tail -f /var/log/cloud-init-output.log"
      echo "* Programlar kurulduktan sonra makineyi kullanmaya başlayabilirsiniz."
      echo ""
      echo "####################################################################################################################"

  - path: /etc/netplan/new-config.yaml
    permissions: '0644'
    content: |
      #!/bin/bash
      network:
        version: 2
        ethernets:
          ens3:
            dhcp4: true
            nameservers:
              addresses:
              - 8.8.8.8
          ens4:
            dhcp4: true
            dhcp4-overrides:
                use-routes: false
          ens5:
            dhcp4: true
            dhcp4-overrides:
                use-routes: false
          ens6:
            dhcp4: true
            dhcp4-overrides:
                use-routes: false
          ens7:
            dhcp4: true
            dhcp4-overrides:
                use-routes: false

  - path: /var/cache/docker_install.sh
    owner: root:root
    permissions: '0755'
    content: |
      #!/bin/bash
      echo "-------------------------------------------- DOCKER INSTALLATION START ---------------------------------------------"

      install -m 0755 -d /etc/apt/keyrings
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
      chmod a+r /etc/apt/keyrings/docker.asc
      echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

      apt-get update
      apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

      groupadd docker
      sudo chmod 777 /var/run/docker.sock
      sudo usermod -aG docker ${vm_uname}

      cat <<EOF | sudo tee /etc/docker/daemon.json
      {
        "insecure-registries": ["registry.ulakhaberlesme.com.tr"],
        "exec-opts": ["native.cgroupdriver=systemd"],
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "100m"
        },
        "storage-driver": "overlay2"
      }
      EOF
      sudo systemctl enable docker
      sudo systemctl daemon-reload
      sudo systemctl start docker
      sudo systemctl restart docker

      echo "____________________________________________________________________________________________ DOCKER INSTALLATION END"

  - path: /var/cache/kubernetes_install.sh
    owner: root:root
    permissions: '0755'
    content: |
      #!/bin/bash
      echo "-------------------------------------------- K8S INSTALLATION STARTED ----------------------------------------------"
      swapoff -a
      sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

      cat <<EOL | sudo tee /etc/modules-load.d/containerd.conf
      overlay
      br_netfilter
      EOL

      modprobe overlay
      modprobe br_netfilter

      cat <<EOL | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1
      EOL
      sysctl --system

      mkdir -p /etc/containerd
      containerd config default | sudo tee /etc/containerd/config.toml
      systemctl restart containerd

      mkdir -p /etc/apt/keyrings 
      curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list

      apt update
      apt install -y kubelet kubeadm kubectl
      apt-mark hold kubelet kubeadm kubectl

      kubectl version
      kubeadm version
      kubelet --version

      echo "-------------------------------------------- ADD KUBERNETES ALIASES START ------------------------------------------"

      find /home -type f -name ".bashrc" | while read -r file; do
        echo 'alias k="kubectl"' >> $file
        echo 'alias kp="kubectl get pods"' >> $file
        echo 'alias kd="kubectl describe"' >> $file
        echo 'alias kl="kubectl logs"' >> $file
        echo 'alias kg="kubectl get"' >> $file
        echo 'alias keit="kubectl exec -it"' >> $file

        echo 'alias k5="kubectl -n $(namespaces=$(kubectl get namespaces -o jsonpath='"'"'{.items[*].metadata.name}'"'"'); for namespace in $namespaces; do if [[ $namespace == *5gcn-deployment* ]]; then echo $namespace; fi; done)"' >> $file
        echo 'alias k5p="k5 get pods"' >> $file
        echo 'alias k5d="k5 describe"' >> $file
        echo 'alias k5l="k5 logs"' >> $file

        echo 'alias km="kubectl -n monitoring"' >> $file
        echo 'alias kmp="km get pods"' >> $file
        echo 'alias kmd="km describe"' >> $file
        echo 'alias kml="km logs"' >> $file
      done

      find /root -type f -name ".bashrc" | while read -r file; do
        echo 'alias k="kubectl"' >> $file
        echo 'alias kp="kubectl get pods"' >> $file
        echo 'alias kd="kubectl describe"' >> $file
        echo 'alias kl="kubectl logs"' >> $file
        echo 'alias kg="kubectl get"' >> $file
        echo 'alias keit="kubectl exec -it"' >> $file

        echo 'alias k5="kubectl -n $(namespaces=$(kubectl get namespaces -o jsonpath='"'"'{.items[*].metadata.name}'"'"'); for namespace in $namespaces; do if [[ $namespace == *5gcn-deployment* ]]; then echo $namespace; fi; done)"' >> $file
        echo 'alias k5p="k5 get pods"' >> $file
        echo 'alias k5d="k5 describe"' >> $file
        echo 'alias k5l="k5 logs"' >> $file

        echo 'alias km="kubectl -n monitoring"' >> $file
        echo 'alias kmp="km get pods"' >> $file
        echo 'alias kmd="km describe"' >> $file
        echo 'alias kml="km logs"' >> $file
      done

      echo "_________________________________________________________________________________________ ADD KUBERNETES ALIASES END"

      echo "_______________________________________________________________________________________________ K8s INSTALLATION END"

  - path: /var/cache/kubernetes_cluster_setup.sh
    owner: root:root
    permissions: '0755'
    content: |
      #!/bin/bash
      echo "-------------------------------------------- KUBEADM CLUSTER SETUP START -------------------------------------------"

      containerd config default | sudo tee /etc/containerd/config.toml
      sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
      perl -i -p0e 's/      \[plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors\]/      [plugins."io.containerd.grpc.v1.cri".registry.mirrors]\n        [plugins."io.containerd.grpc.v1.cri".registry.mirrors."registry.ulakhaberlesme.com.tr"]\n          endpoint = ["http:\/\/registry.ulakhaberlesme.com.tr"]/igs' /etc/containerd/config.toml
      perl -i -p0e 's/      \[plugins.\"io.containerd.grpc.v1.cri\".registry.configs\]/      [plugins."io.containerd.grpc.v1.cri".registry.configs]\n        [plugins."io.containerd.grpc.v1.cri".registry.configs."registry.ulakhaberlesme.com.tr".tls]\n          insecure_skip_verify = true/igs' /etc/containerd/config.toml
      systemctl restart containerd

      echo "-------------------------------------------- KUBEADM INIT START ----------------------------------------------------"
      sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --v=5 --ignore-preflight-errors=all
      echo "___________________________________________________________________________________________________ KUBEADM INIT END"

      echo "-------------------------------------------- KUBECTL ${vm_uname} MKDIR START ---------------------------------------"
      sudo mkdir -p /home/${vm_uname}/.kube
      sudo cp -i /etc/kubernetes/admin.conf /home/${vm_uname}/.kube/config
      sudo chown ${vm_uname}:${vm_uname} /home/${vm_uname}/.kube/config
      echo "____________________________________________________________________________________________ KUBECTL ${vm_uname} MKDIR END"

      echo "-------------------------------------------- KUBECTL ROOT MKDIR START ----------------------------------------------"
      sudo mkdir -p /root/.kube
      sudo cp -i /etc/kubernetes/admin.conf /root/.kube/config
      sudo chown root:root /root/.kube/config
      echo "____________________________________________________________________________________________ KUBECTL ROOT MKDIR END"

      echo "-------------------------------------------- KUBECTL ROOTPATH MKDIR START ------------------------------------------"
      sudo mkdir -p /.kube
      sudo cp -i /etc/kubernetes/admin.conf /.kube/config
      sudo chown ${vm_uname}:${vm_uname} /.kube/config
      echo "_________________________________________________________________________________________ KUBECTL ROOTPATH MKDIR END"

      echo "-------------------------------------------- KUBECTL NETWORK INSTALL START -----------------------------------------"
      kubectl --kubeconfig /.kube/config apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
      kubectl --kubeconfig /.kube/config taint nodes --all node-role.kubernetes.io/control-plane-
      echo "________________________________________________________________________________________ KUBECTL NETWORK INSTALL END"

      echo "-------------------------------------------- UPDATE KUBELET CONFIG START -------------------------------------------"
      yq eval -i '.spec.containers[0].command += "--service-node-port-range=30000-39000"' /etc/kubernetes/manifests/kube-apiserver.yaml
      systemctl restart kubelet
      echo "__________________________________________________________________________________________ UPDATE KUBELET CONFIG END"

      echo "__________________________________________________________________________________________ KUBEADM CLUSTER SETUP END"

  - path: /var/cache/helm_install.sh
    owner: root:root
    permissions: '0755'
    content: |
      #!/bin/bash
      echo "-------------------------------------------- HELM INSTALLATION START --------------------------------------------"
      curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
      chmod +x get_helm.sh
      ./get_helm.sh
      helm repo add chartmuseum http://helmchart.ulakhaberlesme.com.tr
      helm repo update

      echo "-------------------------------------------- HELM REPO CONFIG START --------------------------------------------"

      mkdir -p /root/.config/helm
      mkdir -p /root/.cache/helm
      sudo cp -R /.config/helm/* /root/.config/helm
      sudo cp -R /.cache/helm/* /root/.cache/helm
      sudo chmod 777 /root/.config/helm/*
      sudo chmod 777 /root/.cache/helm/*

      mkdir -p /home/${vm_uname}/.config/helm
      mkdir -p /home/${vm_uname}/.cache/helm
      sudo cp -R /.config/helm/* /home/${vm_uname}/.config/helm
      sudo cp -R /.cache/helm/* /home/${vm_uname}/.cache/helm
      sudo chmod 777 /home/${vm_uname}/.config/helm/*
      sudo chmod 777 /home/${vm_uname}/.cache/helm/*

      echo "____________________________________________________________________________________________ HELM REPO CONFIG END"

      echo "-------------------------------------------- ADD HELM ALIASES START --------------------------------------------"

      find /home -type f -name ".bashrc" | while read -r file; do
        echo 'alias hi="helm install"' >> $file
        echo 'alias hu="helm uninstall"' >> $file

        echo 'alias hm="helm -n monitoring"' >> $file
        echo 'alias hmi="hm install"' >> $file
        echo 'alias hmu="hm uninstall"' >> $file

        echo 'alias h5="helm -n $(namespaces=$(kubectl get namespaces -o jsonpath='"'"'{.items[*].metadata.name}'"'"'); for namespace in $namespaces; do if [[ $namespace == *5gcn-deployment* ]]; then echo $namespace; fi; done)"' >> $file
        echo 'alias h5i="h5 install"' >> $file
        echo 'alias h5u="h5 uninstall"' >> $file
      done

      find /root -type f -name ".bashrc" | while read -r file; do
        echo 'alias hi="helm install"' >> $file
        echo 'alias hu="helm uninstall"' >> $file

        echo 'alias hm="helm -n monitoring"' >> $file
        echo 'alias hmi="hm install"' >> $file
        echo 'alias hmu="hm uninstall"' >> $file

        echo 'alias h5="helm -n $(namespaces=$(kubectl get namespaces -o jsonpath='"'"'{.items[*].metadata.name}'"'"'); for namespace in $namespaces; do if [[ $namespace == *5gcn-deployment* ]]; then echo $namespace; fi; done)"' >> $file
        echo 'alias h5i="h5 install"' >> $file
        echo 'alias h5u="h5 uninstall"' >> $file
      done

      echo "____________________________________________________________________________________________ ADD HELM ALIASES END"

      echo "____________________________________________________________________________________________ HELM INSTALLATION ENDED"

  - path: /var/cache/nfs_configure.sh
    owner: root:root
    permissions: '0755'
    content: |
      #!/bin/bash
      echo "-------------------------------------------- NFS CONFIGURATION START -----------------------------------------------"
      # Configure NFS to allow data storage from new VM
      sshpass -p ${nfs_password} ssh -o StrictHostKeyChecking=no ${nfs_username}@${nfs_ip} 'echo "/mnt/nfs ${fipp}(rw,sync,no_root_squash,no_subtree_check)" >> /etc/exports'
      sshpass -p ${nfs_password} ssh -o StrictHostKeyChecking=no ${nfs_username}@${nfs_ip} 'sudo exportfs -a'
      echo "____________________________________________________________________________________________ NFS CONFIGURATION END"

      echo "---------------------------------------------- CLONE HELMCHART REPO START ------------------------------------------"
      # Clone HelmChart Repository
      git clone http://${gitlab_token_name}:${gitlab_token}@gitlab.ulakhaberlesme.com.tr/DevOps/5gcn-helmchart.git 5gcn_helmchart

      # Apply NFS Provisioner Pod
      cd /5gcn_helmchart/nfs-provisioner && kubectl --kubeconfig /.kube/config apply -k .
      echo "___________________________________________________________________________________________ CLONE HELMCHART REPO END"

  - path: /var/cache/instal_ubuntu_desktop.sh
    owner: root:root
    permissions: '0755'
    content: |
      #!/bin/bash
      echo "-------------------------------------------- UBUNTU-DESKTOP INSTALLATION START -----------------------------------"
      sudo apt install ubuntu-desktop -y
      sudo apt install xrdp -y
      sudo ufw allow 3389
      sudo reboot
      echo "__________________________________________________________________________________ UBUNTU-DESKTOP INSTALLATION END"

  - path: /var/cache/installation_test.sh
    owner: root:root
    permissions: '0755'
    content: |
      #!/bin/bash
      echo "-------------------------------------------- INSTALLATION START ----------------------------------------------------"

      echo "Floating IP: ${fipp}"
      echo "NFS IP: ${nfs_ip}"

      # disable daemon notification
      sudo sed -i 's/#$nrconf{restart} = '\''i'\'';/$nrconf{restart} = '\''a'\'';/g' /etc/needrestart/needrestart.conf

      # added ulak nameserver
      sudo sed -i 's/^nameserver .*/nameserver 192.168.10.12/' /etc/resolv.conf

      # Zaman dilimi ayarlanıyor
      echo "-------------------------------------------- SETTING DATE/TIME ------------------------------------------------------"
      sudo timedatectl set-ntp yes
      sudo timedatectl set-timezone "Asia/Istanbul"

      # added new user
      echo "-------------------------------------------- USER CONFIG START -----------------------------------------------------"
      useradd -m -s /usr/bin/bash ${vm_uname}
      echo ${vm_uname}:${vm_pass} | sudo chpasswd

      # /etc/sudoers.d/${vm_uname} Dosyasını yaratarak sudoers dosyasında yapılacak bir hatanın önüne geçiyoruz
      sudo cat << EOF >> /etc/sudoers.d/${vm_uname}
      ${vm_uname}  ALL=(ALL:ALL) ALL
      EOF
      echo "____________________________________________________________________________________________________ USER CONFIG END"

      echo "-------------------------------------------- COMMON SOFTWARE INSTALLATION START ------------------------------------"

      apt-get update -y
      apt-get upgrade -y
      apt-get install -y apt-transport-https curl wget ca-certificates software-properties-common net-tools vim git build-essential sshpass nfs-common
      wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 && chmod +x /usr/local/bin/yq

      echo "___________________________________________________________________________________ COMMON SOFTWARE INSTALLATION END"

      dockerInstalled=false
      kubernetesInstalled=false
      clusterSetup=false

      installDocker=false
      installKubernetes=false
      setupKubernetesCluster=false
      installHelm=false
      configureNFS=false
      installDesktop=false

      if [[ "${components}" == *"INSTALL_DOCKER"* ]]; then
        echo "Docker Installation Enabled."
        installDocker=true
      fi

      if [[ "${components}" == *"INSTALL_KUBERNETES"* ]]; then
        echo "Kubernetes Installation Enabled."
        installKubernetes=true
      fi

      if [[ "${components}" == *"SETUP_KUBERNETES_CLUSTER"* ]]; then
        echo "Kubernetes Cluster Setup Enabled."
        setupKubernetesCluster=true
      fi

      if [[ "${components}" == *"CONFIGURE_NFS"* ]]; then
        echo "NFS Configuration Enabled."
        configureNFS=true
      fi

      if [[ "${components}" == *"INSTALL_HELM"* ]]; then
        echo "Helm Installation Enabled."
        installHelm=true
      fi

      if [[ "${components}" == *"UBUNTU_DESKTOP"* ]]; then
        echo "Ubuntu Desktop Installation Enabled."
        installDesktop=true
      fi

      if [[ $installDocker == true ]]; then
        /var/cache/docker_install.sh
        dockerInstalled=true
      else
        echo "------ Skipping Docker Installation ..."
      fi

      if [[ $installKubernetes == true ]]; then
        if [[ $dockerInstalled == true ]]; then
          /var/cache/kubernetes_install.sh
          kubernetesInstalled=true
        else
          echo "------ Error: Kubernetes Installation will abort because Docker is not installed ..."
          echo "dockerInstalled: $dockerInstalled"
          echo "kubernetesInstalled: $kubernetesInstalled"
          echo "clusterSetup: $clusterSetup"
          exit 1
        fi
      else
        echo "------ Skipping Kubernetes Installation ..."
      fi

      if [[ $setupKubernetesCluster == true ]]; then
        if [[ $kubernetesInstalled == true ]]; then
          /var/cache/kubernetes_cluster_setup.sh
          clusterSetup=true
        else
          echo "------ Error: Cluster Setup will abort because Kubernetes is not installed ..."
          echo "dockerInstalled: $dockerInstalled"
          echo "kubernetesInstalled: $kubernetesInstalled"
          echo "clusterSetup: $clusterSetup"
          exit 1
        fi
      else
        echo "------ Skipping Kubernetes Cluster Setup ..."
      fi

      if [[ $installHelm == true ]]; then
        if [[ $kubernetesInstalled == true ]]; then
          /var/cache/helm_install.sh
        else
          echo "------ Error: Helm Installation will abort because Kubernetes is not installed ..."
          echo "dockerInstalled: $dockerInstalled"
          echo "kubernetesInstalled: $kubernetesInstalled"
          echo "clusterSetup: $clusterSetup"
          exit 1
        fi
      else
        echo "------ Skipping Helm Installation ..."
      fi

      if [[ $configureNFS == true ]]; then
        if [[ $kubernetesInstalled == true && $clusterSetup == true ]]; then
          /var/cache/nfs_configure.sh
        else
          echo "------ Error: NFS Configuration will abort because Kubernetes is not installed ..."
          echo "dockerInstalled: $dockerInstalled"
          echo "kubernetesInstalled: $kubernetesInstalled"
          echo "clusterSetup: $clusterSetup"
          exit 1
        fi
      else
        echo "------ Skipping NFS Configuration ..."
      fi

      if [[ $installDesktop == true ]]; then
        /var/cache/instal_ubuntu_desktop.sh
      else
        echo "------ Skipping Ubuntu Desktop Installation ..."
      fi
      echo "_________________________________________________________________________________________________ INSTALLATION ENDED"

runcmd:
  - rm /etc/netplan/50-cloud-init.yaml
  - netplan generate
  - netplan apply
  - bash -x /var/cache/installation_test.sh
