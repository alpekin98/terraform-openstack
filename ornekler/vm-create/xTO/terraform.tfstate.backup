{
  "version": 4,
  "terraform_version": "1.6.6",
  "serial": 56,
  "lineage": "81696601-9e29-8c8f-30dd-491a66f08a41",
  "outputs": {
    "floating_ip": {
      "value": "192.168.13.53",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "template_file",
      "name": "user_data_jammy",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "54472f0c97c91d76aed5fe5d3a051abb05113a790ebfa865acef6a4ffa3b8c72",
            "rendered": "#cloud-config\npassword: sifre123\nchpasswd: { expire: False }\nssh_pwauth: True\nhostname: cem-topkaya-vm\nmanage_etc_hosts: true\n\nwrite_files:\n  - path: /etc/cloud/cloud.cfg.d/99-custom-networking.cfg\n    permissions: '0644'\n    content: |\n      network: {config: disabled}\n\n  - path: /etc/update-motd.d/99-ulak-message\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"\"\n      echo \"░█░█░█░░░█▀█░█░█░░░█░█░█▀█░█▀▄░█▀▀░█▀▄░█░░░█▀▀░█▀▀░█▄█░█▀▀\"\n      echo \"░█░█░█░░░█▀█░█▀▄░░░█▀█░█▀█░█▀▄░█▀▀░█▀▄░█░░░█▀▀░▀▀█░█░█░█▀▀\"\n      echo \"░▀▀▀░▀▀▀░▀░▀░▀░▀░░░▀░▀░▀░▀░▀▀░░▀▀▀░▀░▀░▀▀▀░▀▀▀░▀▀▀░▀░▀░▀▀▀\"\n      echo \"\"\n      echo \"############################################ GELISTIRICIYE NOT #####################################################\"\n      echo \"\"\n      echo \"* Eğer makineyi yeni oluşturduysanız, programların tam olarak kurulabilmesi için yaklaşık 10 dakika bekleyin!\"\n      echo \"* Arka planda programların kurulumunu izlemek için aşağıdaki komutla günlük kayılarına bakabilirsiniz.\"\n      echo \"* sudo tail -f /var/log/cloud-init-output.log\"\n      echo \"* Programlar kurulduktan sonra makineyi kullanmaya başlayabilirsiniz.\"\n      echo \"\"\n      echo \"####################################################################################################################\"\n\n  - path: /etc/netplan/new-config.yaml\n    permissions: '0644'\n    content: |\n      #!/bin/bash\n      network:\n        version: 2\n        ethernets:\n          ens3:\n            dhcp4: true\n            nameservers:\n              addresses:\n              - 8.8.8.8\n          ens4:\n            dhcp4: true\n            dhcp4-overrides:\n                use-routes: false\n          ens5:\n            dhcp4: true\n            dhcp4-overrides:\n                use-routes: false\n          ens6:\n            dhcp4: true\n            dhcp4-overrides:\n                use-routes: false\n          ens7:\n            dhcp4: true\n            dhcp4-overrides:\n                use-routes: false\n\n  - path: /var/cache/docker_install.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- DOCKER INSTALLATION START ---------------------------------------------\"\n      apt-get install \\\n          ca-certificates \\\n          curl \\\n          gnupg \\\n          lsb-release -y\n        \n      install -m 0755 -d /etc/apt/keyrings\n      curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\n      chmod a+r /etc/apt/keyrings/docker.asc\n      echo \\\n        \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n        $(. /etc/os-release \u0026\u0026 echo \"$VERSION_CODENAME\") stable\" | \\\n        sudo tee /etc/apt/sources.list.d/docker.list \u003e /dev/null\n\n      apt-get update\n      apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n      sudo usermod -aG docker cem.topkaya\n\n      cat \u003c\u003cEOF | sudo tee /etc/docker/daemon.json\n      {\n        \"insecure-registries\": [\"registry.ulakhaberlesme.com.tr\"],\n        \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n        \"log-driver\": \"json-file\",\n        \"log-opts\": {\n          \"max-size\": \"100m\"\n        },\n        \"storage-driver\": \"overlay2\"\n      }\n      EOF\n      sudo systemctl restart docker\n\n      echo \"____________________________________________________________________________________________ DOCKER INSTALLATION END\"\n\n  - path: /var/cache/kubernetes_install.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- K8S INSTALLATION STARTED ----------------------------------------------\"\n      # Docker'ın altındaki bir motor olan containerd sayesinde konteyner işlemleri yapılır\n      # Kurmak için aşağıdaki paketleri ve depo adresini ekleyerek paket listesini güncelleyeceğiz\n      apt-get install \\\n          ca-certificates \\\n          curl \\\n          gnupg \\\n          lsb-release -y\n        \n      install -m 0755 -d /etc/apt/keyrings\n      curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\n      chmod a+r /etc/apt/keyrings/docker.asc\n      echo \\\n        \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n        $(. /etc/os-release \u0026\u0026 echo \"$VERSION_CODENAME\") stable\" | \\\n        sudo tee /etc/apt/sources.list.d/docker.list \u003e /dev/null\n\n      apt-get update\n      apt install containerd.io -y\n      rm /etc/containerd/config.toml\n      sudo systemctl restart containerd\n      # containerd Kuruldu,  kubernetes kurulumuna devam edeceğiz\n      # İşletim sistemi sistemlerinin RAM'miş gibi kullanmaya çalıştığı sabit sürücülerdeki takas alanını biliyor olabilirsiniz.\n      # İşletim sistemleri, daha acil görevler için RAM'de yer açmak amacıyla daha az erişilen verileri takas alanına taşımaya çalışır.\n      # Ancak takastaki verilere erişim, RAM'deki verilere erişimden çok daha yavaştır çünkü sabit sürücüler RAM'den daha yavaştır.\n      # Kubernetes, mevcut kaynakların anlaşılmasına dayalı olarak çalışmayı planlar.\n      # İş yükleri takas kullanmaya başlarsa Kubernetes'in doğru planlama kararları alması zorlaşabilir.\n      # Bu nedenle Kubernetes'i kurmadan önce takasın devre dışı bırakılması önerilir.\n\n      swapoff -a\n      sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab\n\n      cat \u003c\u003cEOL | sudo tee /etc/modules-load.d/containerd.conf\n      overlay\n      br_netfilter\n      EOL\n\n      modprobe overlay\n      modprobe br_netfilter\n\n      cat \u003c\u003cEOL | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf\n      net.bridge.bridge-nf-call-iptables  = 1\n      net.bridge.bridge-nf-call-ip6tables = 1\n      net.ipv4.ip_forward                 = 1\n      EOL\n      sysctl --system\n\n      mkdir -p /etc/containerd\n      containerd config default | sudo tee /etc/containerd/config.toml\n      systemctl restart containerd\n\n      mkdir -p /etc/apt/keyrings \n      curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n      echo \"deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /\" | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\n      apt update\n      apt install -y kubelet kubeadm kubectl\n      apt-mark hold kubelet kubeadm kubectl\n\n      kubectl version\n      kubeadm version\n      kubelet --version\n\n      echo \"-------------------------------------------- ADD KUBERNETES ALIASES START ------------------------------------------\"\n\n      find /home -type f -name \".bashrc\" | while read -r file; do\n        echo 'KUBE_EDITOR=\"nano\"' \u003e\u003e $file\n        echo 'alias k=\"kubectl\"' \u003e\u003e $file\n        echo 'alias kp=\"kubectl get pods\"' \u003e\u003e $file\n        echo 'alias kd=\"kubectl describe\"' \u003e\u003e $file\n        echo 'alias kl=\"kubectl logs\"' \u003e\u003e $file\n        echo 'alias kg=\"kubectl get\"' \u003e\u003e $file\n        echo 'alias keit=\"kubectl exec -it\"' \u003e\u003e $file\n\n        echo 'alias k5=\"kubectl -n $(namespaces=$(kubectl get namespaces -o jsonpath='\"'\"'{.items[*].metadata.name}'\"'\"'); for namespace in $namespaces; do if [[ $namespace == *5gcn-deployment* ]]; then echo $namespace; fi; done)\"' \u003e\u003e $file\n        echo 'alias k5p=\"k5 get pods\"' \u003e\u003e $file\n        echo 'alias k5d=\"k5 describe\"' \u003e\u003e $file\n        echo 'alias k5l=\"k5 logs\"' \u003e\u003e $file\n\n        echo 'alias km=\"kubectl -n monitoring\"' \u003e\u003e $file\n        echo 'alias kmp=\"km get pods\"' \u003e\u003e $file\n        echo 'alias kmd=\"km describe\"' \u003e\u003e $file\n        echo 'alias kml=\"km logs\"' \u003e\u003e $file\n      done\n\n      find /root -type f -name \".bashrc\" | while read -r file; do\n        echo 'KUBE_EDITOR=\"nano\"' \u003e\u003e $file\n        echo 'alias k=\"kubectl\"' \u003e\u003e $file\n        echo 'alias kp=\"kubectl get pods\"' \u003e\u003e $file\n        echo 'alias kd=\"kubectl describe\"' \u003e\u003e $file\n        echo 'alias kl=\"kubectl logs\"' \u003e\u003e $file\n        echo 'alias kg=\"kubectl get\"' \u003e\u003e $file\n        echo 'alias keit=\"kubectl exec -it\"' \u003e\u003e $file\n\n        echo 'alias k5=\"kubectl -n $(namespaces=$(kubectl get namespaces -o jsonpath='\"'\"'{.items[*].metadata.name}'\"'\"'); for namespace in $namespaces; do if [[ $namespace == *5gcn-deployment* ]]; then echo $namespace; fi; done)\"' \u003e\u003e $file\n        echo 'alias k5p=\"k5 get pods\"' \u003e\u003e $file\n        echo 'alias k5d=\"k5 describe\"' \u003e\u003e $file\n        echo 'alias k5l=\"k5 logs\"' \u003e\u003e $file\n\n        echo 'alias km=\"kubectl -n monitoring\"' \u003e\u003e $file\n        echo 'alias kmp=\"km get pods\"' \u003e\u003e $file\n        echo 'alias kmd=\"km describe\"' \u003e\u003e $file\n        echo 'alias kml=\"km logs\"' \u003e\u003e $file\n      done\n\n      echo \"_________________________________________________________________________________________ ADD KUBERNETES ALIASES END\"\n\n      echo \"_______________________________________________________________________________________________ K8s INSTALLATION END\"\n\n  - path: /var/cache/kubernetes_cluster_setup.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- KUBEADM CLUSTER SETUP START -------------------------------------------\"\n\n      containerd config default | sudo tee /etc/containerd/config.toml\n      sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml\n      perl -i -p0e 's/      \\[plugins.\\\"io.containerd.grpc.v1.cri\\\".registry.mirrors\\]/      [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors]\\n        [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"registry.ulakhaberlesme.com.tr\"]\\n          endpoint = [\"http:\\/\\/registry.ulakhaberlesme.com.tr\"]/igs' /etc/containerd/config.toml\n      perl -i -p0e 's/      \\[plugins.\\\"io.containerd.grpc.v1.cri\\\".registry.configs\\]/      [plugins.\"io.containerd.grpc.v1.cri\".registry.configs]\\n        [plugins.\"io.containerd.grpc.v1.cri\".registry.configs.\"registry.ulakhaberlesme.com.tr\".tls]\\n          insecure_skip_verify = true/igs' /etc/containerd/config.toml\n      systemctl restart containerd\n\n      echo \"-------------------------------------------- KUBEADM INIT START ----------------------------------------------------\"\n      sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --v=5 --ignore-preflight-errors=all\n      echo \"___________________________________________________________________________________________________ KUBEADM INIT END\"\n\n      echo \"-------------------------------------------- KUBECTL cem.topkaya MKDIR START ---------------------------------------\"\n      sudo mkdir -p /home/cem.topkaya/.kube\n      sudo cp -i /etc/kubernetes/admin.conf /home/cem.topkaya/.kube/config\n      sudo chown cem.topkaya:cem.topkaya /home/cem.topkaya/.kube/config\n      echo \"____________________________________________________________________________________________ KUBECTL cem.topkaya MKDIR END\"\n\n      echo \"-------------------------------------------- KUBECTL ROOT MKDIR START ----------------------------------------------\"\n      sudo mkdir -p /root/.kube\n      sudo cp -i /etc/kubernetes/admin.conf /root/.kube/config\n      sudo chown root:root /root/.kube/config\n      echo \"____________________________________________________________________________________________ KUBECTL ROOT MKDIR END\"\n\n      echo \"-------------------------------------------- KUBECTL ROOTPATH MKDIR START ------------------------------------------\"\n      sudo mkdir -p /.kube\n      sudo cp -i /etc/kubernetes/admin.conf /.kube/config\n      sudo chown cem.topkaya:cem.topkaya /.kube/config\n      echo \"_________________________________________________________________________________________ KUBECTL ROOTPATH MKDIR END\"\n\n      echo \"-------------------------------------------- KUBECTL NETWORK INSTALL START -----------------------------------------\"\n      kubectl --kubeconfig /.kube/config apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n      kubectl --kubeconfig /.kube/config taint nodes --all node-role.kubernetes.io/control-plane-\n      echo \"________________________________________________________________________________________ KUBECTL NETWORK INSTALL END\"\n\n      echo \"-------------------------------------------- UPDATE KUBELET CONFIG START -------------------------------------------\"\n      yq eval -i '.spec.containers[0].command += \"--service-node-port-range=30000-39000\"' /etc/kubernetes/manifests/kube-apiserver.yaml\n      systemctl restart kubelet\n      echo \"__________________________________________________________________________________________ UPDATE KUBELET CONFIG END\"\n\n      echo \"__________________________________________________________________________________________ KUBEADM CLUSTER SETUP END\"\n\n  - path: /var/cache/helm_install.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- HELM INSTALLATION START --------------------------------------------\"\n      curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n      chmod +x get_helm.sh\n      ./get_helm.sh\n      helm repo add chartmuseum http://helmchart.ulakhaberlesme.com.tr\n      helm repo update\n\n      echo \"-------------------------------------------- HELM REPO CONFIG START --------------------------------------------\"\n\n      mkdir -p /root/.config/helm\n      mkdir -p /root/.cache/helm\n      sudo cp -R /.config/helm/* /root/.config/helm\n      sudo cp -R /.cache/helm/* /root/.cache/helm\n      sudo chmod 777 /root/.config/helm/*\n      sudo chmod 777 /root/.cache/helm/*\n\n      mkdir -p /home/cem.topkaya/.config/helm\n      mkdir -p /home/cem.topkaya/.cache/helm\n      sudo cp -R /.config/helm/* /home/cem.topkaya/.config/helm\n      sudo cp -R /.cache/helm/* /home/cem.topkaya/.cache/helm\n      sudo chmod 777 /home/cem.topkaya/.config/helm/*\n      sudo chmod 777 /home/cem.topkaya/.cache/helm/*\n\n      echo \"____________________________________________________________________________________________ HELM REPO CONFIG END\"\n\n      echo \"-------------------------------------------- ADD HELM ALIASES START --------------------------------------------\"\n\n      find /home -type f -name \".bashrc\" | while read -r file; do\n        echo 'alias hi=\"helm install\"' \u003e\u003e $file\n        echo 'alias hu=\"helm uninstall\"' \u003e\u003e $file\n\n        echo 'alias hm=\"helm -n monitoring\"' \u003e\u003e $file\n        echo 'alias hmi=\"hm install\"' \u003e\u003e $file\n        echo 'alias hmu=\"hm uninstall\"' \u003e\u003e $file\n\n        echo 'alias h5=\"helm -n $(namespaces=$(kubectl get namespaces -o jsonpath='\"'\"'{.items[*].metadata.name}'\"'\"'); for namespace in $namespaces; do if [[ $namespace == *5gcn-deployment* ]]; then echo $namespace; fi; done)\"' \u003e\u003e $file\n        echo 'alias h5i=\"h5 install\"' \u003e\u003e $file\n        echo 'alias h5u=\"h5 uninstall\"' \u003e\u003e $file\n      done\n\n      find /root -type f -name \".bashrc\" | while read -r file; do\n        echo 'alias hi=\"helm install\"' \u003e\u003e $file\n        echo 'alias hu=\"helm uninstall\"' \u003e\u003e $file\n\n        echo 'alias hm=\"helm -n monitoring\"' \u003e\u003e $file\n        echo 'alias hmi=\"hm install\"' \u003e\u003e $file\n        echo 'alias hmu=\"hm uninstall\"' \u003e\u003e $file\n\n        echo 'alias h5=\"helm -n $(namespaces=$(kubectl get namespaces -o jsonpath='\"'\"'{.items[*].metadata.name}'\"'\"'); for namespace in $namespaces; do if [[ $namespace == *5gcn-deployment* ]]; then echo $namespace; fi; done)\"' \u003e\u003e $file\n        echo 'alias h5i=\"h5 install\"' \u003e\u003e $file\n        echo 'alias h5u=\"h5 uninstall\"' \u003e\u003e $file\n      done\n\n      echo \"____________________________________________________________________________________________ ADD HELM ALIASES END\"\n\n      echo \"____________________________________________________________________________________________ HELM INSTALLATION ENDED\"\n\n  - path: /var/cache/nfs_configure.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- NFS CONFIGURATION START -----------------------------------------------\"\n      # Configure NFS to allow data storage from new VM\n      sshpass -p test123 ssh -o StrictHostKeyChecking=no ulak@192.168.57.27 'echo \"/mnt/nfs 192.168.13.53(rw,sync,no_root_squash,no_subtree_check)\" \u003e\u003e /etc/exports'\n      sshpass -p test123 ssh -o StrictHostKeyChecking=no ulak@192.168.57.27 'sudo exportfs -a'\n      echo \"____________________________________________________________________________________________ NFS CONFIGURATION END\"\n\n      echo \"---------------------------------------------- CLONE HELMCHART REPO START ------------------------------------------\"\n      # Clone HelmChart Repository\n      git clone http://Terraform_Token:rmyjjygxdpvb3MKzJ6S6@gitlab.ulakhaberlesme.com.tr/DevOps/5gcn-helmchart.git 5gcn_helmchart\n\n      # Apply NFS Provisioner Pod\n      cd /5gcn_helmchart/nfs-provisioner \u0026\u0026 kubectl --kubeconfig /.kube/config apply -k .\n      echo \"___________________________________________________________________________________________ CLONE HELMCHART REPO END\"\n\n  - path: /var/cache/ubuntu_desktop_install.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- UBUNTU-DESKTOP INSTALLATION START -----------------------------------\"\n      sudo apt install ubuntu-desktop -y\n      sudo apt install xrdp -y\n      sudo ufw allow 3389\n      sudo reboot\n      echo \"__________________________________________________________________________________ UBUNTU-DESKTOP INSTALLATION END\"\n\n  - path: /var/cache/installation_test.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- INSTALLATION START ----------------------------------------------------\"\n\n      echo \"Floating IP: 192.168.13.53\"\n      echo \"NFS IP: 192.168.57.27\"\n\n      # disable daemon notification\n      sudo sed -i 's/#$nrconf{restart} = '\\''i'\\'';/$nrconf{restart} = '\\''a'\\'';/g' /etc/needrestart/needrestart.conf\n\n      # added ulak nameserver\n      sudo sed -i 's/^nameserver .*/nameserver 192.168.10.12/' /etc/resolv.conf\n\n      # Zaman dilimi ayarlanıyor\n      echo \"-------------------------------------------- SETTING DATE/TIME ------------------------------------------------------\"\n      sudo timedatectl set-ntp yes\n      sudo timedatectl set-timezone \"Asia/Istanbul\"\n\n      # added new user\n      echo \"-------------------------------------------- USER CONFIG START -----------------------------------------------------\"\n      useradd -m -s /usr/bin/bash cem.topkaya\n      echo cem.topkaya:cem.topkaya | sudo chpasswd\n\n      # /etc/sudoers.d/cem.topkaya Dosyasını yaratarak sudoers dosyasında yapılacak bir hatanın önüne geçiyoruz\n      echo \"cem.topkaya  ALL=(ALL:ALL) NOPASSWD:ALL\" | sudo tee --append /etc/sudoers\n      [ $? -eq 0 ] \u0026\u0026 echo \"Sudoers command was successful.\" || echo \"Sudoers command failed.\"\n      echo \"____________________________________________________________________________________________________ USER CONFIG END\"\n\n      echo \"-------------------------------------------- COMMON SOFTWARE INSTALLATION START ------------------------------------\"\n\n      apt-get update -y\n      apt-get upgrade -y\n      apt-get install -y apt-transport-https curl wget ca-certificates software-properties-common net-tools vim nano git build-essential sshpass nfs-common htop tree\n      wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 \u0026\u0026 chmod +x /usr/local/bin/yq\n\n      echo \"___________________________________________________________________________________ COMMON SOFTWARE INSTALLATION END\"\n\n      dockerInstalled=false\n      kubernetesInstalled=false\n      clusterSetup=false\n\n      installDocker=false\n      installKubernetes=false\n      setupKubernetesCluster=false\n      installHelm=false\n      configureNFS=false\n      installDesktop=false\n\n      if [[ \"\" == *\"INSTALL_DOCKER\"* ]]; then\n        echo \"Docker Installation Enabled.\"\n        installDocker=true\n      fi\n\n      if [[ \"\" == *\"INSTALL_KUBERNETES\"* ]]; then\n        echo \"Kubernetes Installation Enabled.\"\n        installKubernetes=true\n      fi\n\n      if [[ \"\" == *\"SETUP_KUBERNETES_CLUSTER\"* ]]; then\n        echo \"Kubernetes Cluster Setup Enabled.\"\n        setupKubernetesCluster=true\n      fi\n\n      if [[ \"\" == *\"CONFIGURE_NFS\"* ]]; then\n        echo \"NFS Configuration Enabled.\"\n        configureNFS=true\n      fi\n\n      if [[ \"\" == *\"INSTALL_HELM\"* ]]; then\n        echo \"Helm Installation Enabled.\"\n        installHelm=true\n      fi\n\n      if [[ \"\" == *\"UBUNTU_DESKTOP\"* ]]; then\n        echo \"Ubuntu Desktop Installation Enabled.\"\n        installDesktop=true\n      fi\n\n      if [[ $installDocker == true ]]; then\n        /var/cache/docker_install.sh\n        dockerInstalled=true\n      else\n        echo \"------ Skipping Docker Installation ...\"\n      fi\n\n      if [[ $installKubernetes == true ]]; then\n        /var/cache/kubernetes_install.sh\n        kubernetesInstalled=true\n        echo \"kubernetesInstalled: $kubernetesInstalled\"\n        echo \"clusterSetup: $clusterSetup\"\n      else\n        echo \"------ Skipping Kubernetes Installation ...\"\n      fi\n\n      if [[ $setupKubernetesCluster == true ]]; then\n        if [[ $kubernetesInstalled == true ]]; then\n          /var/cache/kubernetes_cluster_setup.sh\n          clusterSetup=true\n        else\n          echo \"------ Error: Cluster Setup will abort because Kubernetes is not installed ...\"\n          echo \"dockerInstalled: $dockerInstalled\"\n          echo \"kubernetesInstalled: $kubernetesInstalled\"\n          echo \"clusterSetup: $clusterSetup\"\n          exit 1\n        fi\n      else\n        echo \"------ Skipping Kubernetes Cluster Setup ...\"\n      fi\n\n      if [[ $installHelm == true ]]; then\n        if [[ $kubernetesInstalled == true ]]; then\n          /var/cache/helm_install.sh\n        else\n          echo \"------ Error: Helm Installation will abort because Kubernetes is not installed ...\"\n          echo \"dockerInstalled: $dockerInstalled\"\n          echo \"kubernetesInstalled: $kubernetesInstalled\"\n          echo \"clusterSetup: $clusterSetup\"\n          exit 1\n        fi\n      else\n        echo \"------ Skipping Helm Installation ...\"\n      fi\n\n      if [[ $configureNFS == true ]]; then\n        if [[ $kubernetesInstalled == true \u0026\u0026 $clusterSetup == true ]]; then\n          /var/cache/nfs_configure.sh\n        else\n          echo \"------ Error: NFS Configuration will abort because Kubernetes is not installed ...\"\n          echo \"dockerInstalled: $dockerInstalled\"\n          echo \"kubernetesInstalled: $kubernetesInstalled\"\n          echo \"clusterSetup: $clusterSetup\"\n          exit 1\n        fi\n      else\n        echo \"------ Skipping NFS Configuration ...\"\n      fi\n\n      if [[ $installDesktop == true ]]; then\n        /var/cache/ubuntu_desktop_install.sh\n      else\n        echo \"------ Skipping Ubuntu Desktop Installation ...\"\n      fi\n      echo \"_________________________________________________________________________________________________ INSTALLATION ENDED\"\n\nruncmd:\n  - rm /etc/netplan/50-cloud-init.yaml\n  - netplan generate\n  - netplan apply\n  - bash -x /var/cache/installation_test.sh\n",
            "template": "#cloud-config\npassword: ${vm_user_pass}\nchpasswd: { expire: False }\nssh_pwauth: True\nhostname: ${vm_name}\nmanage_etc_hosts: true\n\nwrite_files:\n  - path: /etc/cloud/cloud.cfg.d/99-custom-networking.cfg\n    permissions: '0644'\n    content: |\n      network: {config: disabled}\n\n  - path: /etc/update-motd.d/99-ulak-message\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"\"\n      echo \"░█░█░█░░░█▀█░█░█░░░█░█░█▀█░█▀▄░█▀▀░█▀▄░█░░░█▀▀░█▀▀░█▄█░█▀▀\"\n      echo \"░█░█░█░░░█▀█░█▀▄░░░█▀█░█▀█░█▀▄░█▀▀░█▀▄░█░░░█▀▀░▀▀█░█░█░█▀▀\"\n      echo \"░▀▀▀░▀▀▀░▀░▀░▀░▀░░░▀░▀░▀░▀░▀▀░░▀▀▀░▀░▀░▀▀▀░▀▀▀░▀▀▀░▀░▀░▀▀▀\"\n      echo \"\"\n      echo \"############################################ GELISTIRICIYE NOT #####################################################\"\n      echo \"\"\n      echo \"* Eğer makineyi yeni oluşturduysanız, programların tam olarak kurulabilmesi için yaklaşık 10 dakika bekleyin!\"\n      echo \"* Arka planda programların kurulumunu izlemek için aşağıdaki komutla günlük kayılarına bakabilirsiniz.\"\n      echo \"* sudo tail -f /var/log/cloud-init-output.log\"\n      echo \"* Programlar kurulduktan sonra makineyi kullanmaya başlayabilirsiniz.\"\n      echo \"\"\n      echo \"####################################################################################################################\"\n\n  - path: /etc/netplan/new-config.yaml\n    permissions: '0644'\n    content: |\n      #!/bin/bash\n      network:\n        version: 2\n        ethernets:\n          ens3:\n            dhcp4: true\n            nameservers:\n              addresses:\n              - 8.8.8.8\n          ens4:\n            dhcp4: true\n            dhcp4-overrides:\n                use-routes: false\n          ens5:\n            dhcp4: true\n            dhcp4-overrides:\n                use-routes: false\n          ens6:\n            dhcp4: true\n            dhcp4-overrides:\n                use-routes: false\n          ens7:\n            dhcp4: true\n            dhcp4-overrides:\n                use-routes: false\n\n  - path: /var/cache/docker_install.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- DOCKER INSTALLATION START ---------------------------------------------\"\n      apt-get install \\\n          ca-certificates \\\n          curl \\\n          gnupg \\\n          lsb-release -y\n        \n      install -m 0755 -d /etc/apt/keyrings\n      curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\n      chmod a+r /etc/apt/keyrings/docker.asc\n      echo \\\n        \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n        $(. /etc/os-release \u0026\u0026 echo \"$VERSION_CODENAME\") stable\" | \\\n        sudo tee /etc/apt/sources.list.d/docker.list \u003e /dev/null\n\n      apt-get update\n      apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n      sudo usermod -aG docker ${vm_user_name}\n\n      cat \u003c\u003cEOF | sudo tee /etc/docker/daemon.json\n      {\n        \"insecure-registries\": [\"registry.ulakhaberlesme.com.tr\"],\n        \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n        \"log-driver\": \"json-file\",\n        \"log-opts\": {\n          \"max-size\": \"100m\"\n        },\n        \"storage-driver\": \"overlay2\"\n      }\n      EOF\n      sudo systemctl restart docker\n\n      echo \"____________________________________________________________________________________________ DOCKER INSTALLATION END\"\n\n  - path: /var/cache/kubernetes_install.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- K8S INSTALLATION STARTED ----------------------------------------------\"\n      # Docker'ın altındaki bir motor olan containerd sayesinde konteyner işlemleri yapılır\n      # Kurmak için aşağıdaki paketleri ve depo adresini ekleyerek paket listesini güncelleyeceğiz\n      apt-get install \\\n          ca-certificates \\\n          curl \\\n          gnupg \\\n          lsb-release -y\n        \n      install -m 0755 -d /etc/apt/keyrings\n      curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\n      chmod a+r /etc/apt/keyrings/docker.asc\n      echo \\\n        \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n        $(. /etc/os-release \u0026\u0026 echo \"$VERSION_CODENAME\") stable\" | \\\n        sudo tee /etc/apt/sources.list.d/docker.list \u003e /dev/null\n\n      apt-get update\n      apt install containerd.io -y\n      rm /etc/containerd/config.toml\n      sudo systemctl restart containerd\n      # containerd Kuruldu,  kubernetes kurulumuna devam edeceğiz\n      # İşletim sistemi sistemlerinin RAM'miş gibi kullanmaya çalıştığı sabit sürücülerdeki takas alanını biliyor olabilirsiniz.\n      # İşletim sistemleri, daha acil görevler için RAM'de yer açmak amacıyla daha az erişilen verileri takas alanına taşımaya çalışır.\n      # Ancak takastaki verilere erişim, RAM'deki verilere erişimden çok daha yavaştır çünkü sabit sürücüler RAM'den daha yavaştır.\n      # Kubernetes, mevcut kaynakların anlaşılmasına dayalı olarak çalışmayı planlar.\n      # İş yükleri takas kullanmaya başlarsa Kubernetes'in doğru planlama kararları alması zorlaşabilir.\n      # Bu nedenle Kubernetes'i kurmadan önce takasın devre dışı bırakılması önerilir.\n\n      swapoff -a\n      sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab\n\n      cat \u003c\u003cEOL | sudo tee /etc/modules-load.d/containerd.conf\n      overlay\n      br_netfilter\n      EOL\n\n      modprobe overlay\n      modprobe br_netfilter\n\n      cat \u003c\u003cEOL | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf\n      net.bridge.bridge-nf-call-iptables  = 1\n      net.bridge.bridge-nf-call-ip6tables = 1\n      net.ipv4.ip_forward                 = 1\n      EOL\n      sysctl --system\n\n      mkdir -p /etc/containerd\n      containerd config default | sudo tee /etc/containerd/config.toml\n      systemctl restart containerd\n\n      mkdir -p /etc/apt/keyrings \n      curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n      echo \"deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /\" | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\n      apt update\n      apt install -y kubelet kubeadm kubectl\n      apt-mark hold kubelet kubeadm kubectl\n\n      kubectl version\n      kubeadm version\n      kubelet --version\n\n      echo \"-------------------------------------------- ADD KUBERNETES ALIASES START ------------------------------------------\"\n\n      find /home -type f -name \".bashrc\" | while read -r file; do\n        echo 'KUBE_EDITOR=\"nano\"' \u003e\u003e $file\n        echo 'alias k=\"kubectl\"' \u003e\u003e $file\n        echo 'alias kp=\"kubectl get pods\"' \u003e\u003e $file\n        echo 'alias kd=\"kubectl describe\"' \u003e\u003e $file\n        echo 'alias kl=\"kubectl logs\"' \u003e\u003e $file\n        echo 'alias kg=\"kubectl get\"' \u003e\u003e $file\n        echo 'alias keit=\"kubectl exec -it\"' \u003e\u003e $file\n\n        echo 'alias k5=\"kubectl -n $(namespaces=$(kubectl get namespaces -o jsonpath='\"'\"'{.items[*].metadata.name}'\"'\"'); for namespace in $namespaces; do if [[ $namespace == *5gcn-deployment* ]]; then echo $namespace; fi; done)\"' \u003e\u003e $file\n        echo 'alias k5p=\"k5 get pods\"' \u003e\u003e $file\n        echo 'alias k5d=\"k5 describe\"' \u003e\u003e $file\n        echo 'alias k5l=\"k5 logs\"' \u003e\u003e $file\n\n        echo 'alias km=\"kubectl -n monitoring\"' \u003e\u003e $file\n        echo 'alias kmp=\"km get pods\"' \u003e\u003e $file\n        echo 'alias kmd=\"km describe\"' \u003e\u003e $file\n        echo 'alias kml=\"km logs\"' \u003e\u003e $file\n      done\n\n      find /root -type f -name \".bashrc\" | while read -r file; do\n        echo 'KUBE_EDITOR=\"nano\"' \u003e\u003e $file\n        echo 'alias k=\"kubectl\"' \u003e\u003e $file\n        echo 'alias kp=\"kubectl get pods\"' \u003e\u003e $file\n        echo 'alias kd=\"kubectl describe\"' \u003e\u003e $file\n        echo 'alias kl=\"kubectl logs\"' \u003e\u003e $file\n        echo 'alias kg=\"kubectl get\"' \u003e\u003e $file\n        echo 'alias keit=\"kubectl exec -it\"' \u003e\u003e $file\n\n        echo 'alias k5=\"kubectl -n $(namespaces=$(kubectl get namespaces -o jsonpath='\"'\"'{.items[*].metadata.name}'\"'\"'); for namespace in $namespaces; do if [[ $namespace == *5gcn-deployment* ]]; then echo $namespace; fi; done)\"' \u003e\u003e $file\n        echo 'alias k5p=\"k5 get pods\"' \u003e\u003e $file\n        echo 'alias k5d=\"k5 describe\"' \u003e\u003e $file\n        echo 'alias k5l=\"k5 logs\"' \u003e\u003e $file\n\n        echo 'alias km=\"kubectl -n monitoring\"' \u003e\u003e $file\n        echo 'alias kmp=\"km get pods\"' \u003e\u003e $file\n        echo 'alias kmd=\"km describe\"' \u003e\u003e $file\n        echo 'alias kml=\"km logs\"' \u003e\u003e $file\n      done\n\n      echo \"_________________________________________________________________________________________ ADD KUBERNETES ALIASES END\"\n\n      echo \"_______________________________________________________________________________________________ K8s INSTALLATION END\"\n\n  - path: /var/cache/kubernetes_cluster_setup.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- KUBEADM CLUSTER SETUP START -------------------------------------------\"\n\n      containerd config default | sudo tee /etc/containerd/config.toml\n      sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml\n      perl -i -p0e 's/      \\[plugins.\\\"io.containerd.grpc.v1.cri\\\".registry.mirrors\\]/      [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors]\\n        [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"registry.ulakhaberlesme.com.tr\"]\\n          endpoint = [\"http:\\/\\/registry.ulakhaberlesme.com.tr\"]/igs' /etc/containerd/config.toml\n      perl -i -p0e 's/      \\[plugins.\\\"io.containerd.grpc.v1.cri\\\".registry.configs\\]/      [plugins.\"io.containerd.grpc.v1.cri\".registry.configs]\\n        [plugins.\"io.containerd.grpc.v1.cri\".registry.configs.\"registry.ulakhaberlesme.com.tr\".tls]\\n          insecure_skip_verify = true/igs' /etc/containerd/config.toml\n      systemctl restart containerd\n\n      echo \"-------------------------------------------- KUBEADM INIT START ----------------------------------------------------\"\n      sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --v=5 --ignore-preflight-errors=all\n      echo \"___________________________________________________________________________________________________ KUBEADM INIT END\"\n\n      echo \"-------------------------------------------- KUBECTL ${vm_user_name} MKDIR START ---------------------------------------\"\n      sudo mkdir -p /home/${vm_user_name}/.kube\n      sudo cp -i /etc/kubernetes/admin.conf /home/${vm_user_name}/.kube/config\n      sudo chown ${vm_user_name}:${vm_user_name} /home/${vm_user_name}/.kube/config\n      echo \"____________________________________________________________________________________________ KUBECTL ${vm_user_name} MKDIR END\"\n\n      echo \"-------------------------------------------- KUBECTL ROOT MKDIR START ----------------------------------------------\"\n      sudo mkdir -p /root/.kube\n      sudo cp -i /etc/kubernetes/admin.conf /root/.kube/config\n      sudo chown root:root /root/.kube/config\n      echo \"____________________________________________________________________________________________ KUBECTL ROOT MKDIR END\"\n\n      echo \"-------------------------------------------- KUBECTL ROOTPATH MKDIR START ------------------------------------------\"\n      sudo mkdir -p /.kube\n      sudo cp -i /etc/kubernetes/admin.conf /.kube/config\n      sudo chown ${vm_user_name}:${vm_user_name} /.kube/config\n      echo \"_________________________________________________________________________________________ KUBECTL ROOTPATH MKDIR END\"\n\n      echo \"-------------------------------------------- KUBECTL NETWORK INSTALL START -----------------------------------------\"\n      kubectl --kubeconfig /.kube/config apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n      kubectl --kubeconfig /.kube/config taint nodes --all node-role.kubernetes.io/control-plane-\n      echo \"________________________________________________________________________________________ KUBECTL NETWORK INSTALL END\"\n\n      echo \"-------------------------------------------- UPDATE KUBELET CONFIG START -------------------------------------------\"\n      yq eval -i '.spec.containers[0].command += \"--service-node-port-range=30000-39000\"' /etc/kubernetes/manifests/kube-apiserver.yaml\n      systemctl restart kubelet\n      echo \"__________________________________________________________________________________________ UPDATE KUBELET CONFIG END\"\n\n      echo \"__________________________________________________________________________________________ KUBEADM CLUSTER SETUP END\"\n\n  - path: /var/cache/helm_install.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- HELM INSTALLATION START --------------------------------------------\"\n      curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n      chmod +x get_helm.sh\n      ./get_helm.sh\n      helm repo add chartmuseum http://helmchart.ulakhaberlesme.com.tr\n      helm repo update\n\n      echo \"-------------------------------------------- HELM REPO CONFIG START --------------------------------------------\"\n\n      mkdir -p /root/.config/helm\n      mkdir -p /root/.cache/helm\n      sudo cp -R /.config/helm/* /root/.config/helm\n      sudo cp -R /.cache/helm/* /root/.cache/helm\n      sudo chmod 777 /root/.config/helm/*\n      sudo chmod 777 /root/.cache/helm/*\n\n      mkdir -p /home/${vm_user_name}/.config/helm\n      mkdir -p /home/${vm_user_name}/.cache/helm\n      sudo cp -R /.config/helm/* /home/${vm_user_name}/.config/helm\n      sudo cp -R /.cache/helm/* /home/${vm_user_name}/.cache/helm\n      sudo chmod 777 /home/${vm_user_name}/.config/helm/*\n      sudo chmod 777 /home/${vm_user_name}/.cache/helm/*\n\n      echo \"____________________________________________________________________________________________ HELM REPO CONFIG END\"\n\n      echo \"-------------------------------------------- ADD HELM ALIASES START --------------------------------------------\"\n\n      find /home -type f -name \".bashrc\" | while read -r file; do\n        echo 'alias hi=\"helm install\"' \u003e\u003e $file\n        echo 'alias hu=\"helm uninstall\"' \u003e\u003e $file\n\n        echo 'alias hm=\"helm -n monitoring\"' \u003e\u003e $file\n        echo 'alias hmi=\"hm install\"' \u003e\u003e $file\n        echo 'alias hmu=\"hm uninstall\"' \u003e\u003e $file\n\n        echo 'alias h5=\"helm -n $(namespaces=$(kubectl get namespaces -o jsonpath='\"'\"'{.items[*].metadata.name}'\"'\"'); for namespace in $namespaces; do if [[ $namespace == *5gcn-deployment* ]]; then echo $namespace; fi; done)\"' \u003e\u003e $file\n        echo 'alias h5i=\"h5 install\"' \u003e\u003e $file\n        echo 'alias h5u=\"h5 uninstall\"' \u003e\u003e $file\n      done\n\n      find /root -type f -name \".bashrc\" | while read -r file; do\n        echo 'alias hi=\"helm install\"' \u003e\u003e $file\n        echo 'alias hu=\"helm uninstall\"' \u003e\u003e $file\n\n        echo 'alias hm=\"helm -n monitoring\"' \u003e\u003e $file\n        echo 'alias hmi=\"hm install\"' \u003e\u003e $file\n        echo 'alias hmu=\"hm uninstall\"' \u003e\u003e $file\n\n        echo 'alias h5=\"helm -n $(namespaces=$(kubectl get namespaces -o jsonpath='\"'\"'{.items[*].metadata.name}'\"'\"'); for namespace in $namespaces; do if [[ $namespace == *5gcn-deployment* ]]; then echo $namespace; fi; done)\"' \u003e\u003e $file\n        echo 'alias h5i=\"h5 install\"' \u003e\u003e $file\n        echo 'alias h5u=\"h5 uninstall\"' \u003e\u003e $file\n      done\n\n      echo \"____________________________________________________________________________________________ ADD HELM ALIASES END\"\n\n      echo \"____________________________________________________________________________________________ HELM INSTALLATION ENDED\"\n\n  - path: /var/cache/nfs_configure.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- NFS CONFIGURATION START -----------------------------------------------\"\n      # Configure NFS to allow data storage from new VM\n      sshpass -p ${nfs_password} ssh -o StrictHostKeyChecking=no ${nfs_username}@${nfs_ip} 'echo \"/mnt/nfs ${fipp}(rw,sync,no_root_squash,no_subtree_check)\" \u003e\u003e /etc/exports'\n      sshpass -p ${nfs_password} ssh -o StrictHostKeyChecking=no ${nfs_username}@${nfs_ip} 'sudo exportfs -a'\n      echo \"____________________________________________________________________________________________ NFS CONFIGURATION END\"\n\n      echo \"---------------------------------------------- CLONE HELMCHART REPO START ------------------------------------------\"\n      # Clone HelmChart Repository\n      git clone http://${gitlab_token_name}:${gitlab_token}@gitlab.ulakhaberlesme.com.tr/DevOps/5gcn-helmchart.git 5gcn_helmchart\n\n      # Apply NFS Provisioner Pod\n      cd /5gcn_helmchart/nfs-provisioner \u0026\u0026 kubectl --kubeconfig /.kube/config apply -k .\n      echo \"___________________________________________________________________________________________ CLONE HELMCHART REPO END\"\n\n  - path: /var/cache/ubuntu_desktop_install.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- UBUNTU-DESKTOP INSTALLATION START -----------------------------------\"\n      sudo apt install ubuntu-desktop -y\n      sudo apt install xrdp -y\n      sudo ufw allow 3389\n      sudo reboot\n      echo \"__________________________________________________________________________________ UBUNTU-DESKTOP INSTALLATION END\"\n\n  - path: /var/cache/installation_test.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- INSTALLATION START ----------------------------------------------------\"\n\n      echo \"Floating IP: ${fipp}\"\n      echo \"NFS IP: ${nfs_ip}\"\n\n      # disable daemon notification\n      sudo sed -i 's/#$nrconf{restart} = '\\''i'\\'';/$nrconf{restart} = '\\''a'\\'';/g' /etc/needrestart/needrestart.conf\n\n      # added ulak nameserver\n      sudo sed -i 's/^nameserver .*/nameserver 192.168.10.12/' /etc/resolv.conf\n\n      # Zaman dilimi ayarlanıyor\n      echo \"-------------------------------------------- SETTING DATE/TIME ------------------------------------------------------\"\n      sudo timedatectl set-ntp yes\n      sudo timedatectl set-timezone \"Asia/Istanbul\"\n\n      # added new user\n      echo \"-------------------------------------------- USER CONFIG START -----------------------------------------------------\"\n      useradd -m -s /usr/bin/bash ${vm_user_name}\n      echo ${vm_user_name}:${vm_user_name} | sudo chpasswd\n\n      # /etc/sudoers.d/${vm_user_name} Dosyasını yaratarak sudoers dosyasında yapılacak bir hatanın önüne geçiyoruz\n      echo \"${vm_user_name}  ALL=(ALL:ALL) NOPASSWD:ALL\" | sudo tee --append /etc/sudoers\n      [ $? -eq 0 ] \u0026\u0026 echo \"Sudoers command was successful.\" || echo \"Sudoers command failed.\"\n      echo \"____________________________________________________________________________________________________ USER CONFIG END\"\n\n      echo \"-------------------------------------------- COMMON SOFTWARE INSTALLATION START ------------------------------------\"\n\n      apt-get update -y\n      apt-get upgrade -y\n      apt-get install -y ${common_packages}\n      wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 \u0026\u0026 chmod +x /usr/local/bin/yq\n\n      echo \"___________________________________________________________________________________ COMMON SOFTWARE INSTALLATION END\"\n\n      dockerInstalled=false\n      kubernetesInstalled=false\n      clusterSetup=false\n\n      installDocker=false\n      installKubernetes=false\n      setupKubernetesCluster=false\n      installHelm=false\n      configureNFS=false\n      installDesktop=false\n\n      if [[ \"${components}\" == *\"INSTALL_DOCKER\"* ]]; then\n        echo \"Docker Installation Enabled.\"\n        installDocker=true\n      fi\n\n      if [[ \"${components}\" == *\"INSTALL_KUBERNETES\"* ]]; then\n        echo \"Kubernetes Installation Enabled.\"\n        installKubernetes=true\n      fi\n\n      if [[ \"${components}\" == *\"SETUP_KUBERNETES_CLUSTER\"* ]]; then\n        echo \"Kubernetes Cluster Setup Enabled.\"\n        setupKubernetesCluster=true\n      fi\n\n      if [[ \"${components}\" == *\"CONFIGURE_NFS\"* ]]; then\n        echo \"NFS Configuration Enabled.\"\n        configureNFS=true\n      fi\n\n      if [[ \"${components}\" == *\"INSTALL_HELM\"* ]]; then\n        echo \"Helm Installation Enabled.\"\n        installHelm=true\n      fi\n\n      if [[ \"${components}\" == *\"UBUNTU_DESKTOP\"* ]]; then\n        echo \"Ubuntu Desktop Installation Enabled.\"\n        installDesktop=true\n      fi\n\n      if [[ $installDocker == true ]]; then\n        /var/cache/docker_install.sh\n        dockerInstalled=true\n      else\n        echo \"------ Skipping Docker Installation ...\"\n      fi\n\n      if [[ $installKubernetes == true ]]; then\n        /var/cache/kubernetes_install.sh\n        kubernetesInstalled=true\n        echo \"kubernetesInstalled: $kubernetesInstalled\"\n        echo \"clusterSetup: $clusterSetup\"\n      else\n        echo \"------ Skipping Kubernetes Installation ...\"\n      fi\n\n      if [[ $setupKubernetesCluster == true ]]; then\n        if [[ $kubernetesInstalled == true ]]; then\n          /var/cache/kubernetes_cluster_setup.sh\n          clusterSetup=true\n        else\n          echo \"------ Error: Cluster Setup will abort because Kubernetes is not installed ...\"\n          echo \"dockerInstalled: $dockerInstalled\"\n          echo \"kubernetesInstalled: $kubernetesInstalled\"\n          echo \"clusterSetup: $clusterSetup\"\n          exit 1\n        fi\n      else\n        echo \"------ Skipping Kubernetes Cluster Setup ...\"\n      fi\n\n      if [[ $installHelm == true ]]; then\n        if [[ $kubernetesInstalled == true ]]; then\n          /var/cache/helm_install.sh\n        else\n          echo \"------ Error: Helm Installation will abort because Kubernetes is not installed ...\"\n          echo \"dockerInstalled: $dockerInstalled\"\n          echo \"kubernetesInstalled: $kubernetesInstalled\"\n          echo \"clusterSetup: $clusterSetup\"\n          exit 1\n        fi\n      else\n        echo \"------ Skipping Helm Installation ...\"\n      fi\n\n      if [[ $configureNFS == true ]]; then\n        if [[ $kubernetesInstalled == true \u0026\u0026 $clusterSetup == true ]]; then\n          /var/cache/nfs_configure.sh\n        else\n          echo \"------ Error: NFS Configuration will abort because Kubernetes is not installed ...\"\n          echo \"dockerInstalled: $dockerInstalled\"\n          echo \"kubernetesInstalled: $kubernetesInstalled\"\n          echo \"clusterSetup: $clusterSetup\"\n          exit 1\n        fi\n      else\n        echo \"------ Skipping NFS Configuration ...\"\n      fi\n\n      if [[ $installDesktop == true ]]; then\n        /var/cache/ubuntu_desktop_install.sh\n      else\n        echo \"------ Skipping Ubuntu Desktop Installation ...\"\n      fi\n      echo \"_________________________________________________________________________________________________ INSTALLATION ENDED\"\n\nruncmd:\n  - rm /etc/netplan/50-cloud-init.yaml\n  - netplan generate\n  - netplan apply\n  - bash -x /var/cache/installation_test.sh\n",
            "vars": {
              "common_packages": "apt-transport-https curl wget ca-certificates software-properties-common net-tools vim nano git build-essential sshpass nfs-common htop tree",
              "components": "",
              "fipp": "192.168.13.53",
              "gitlab_token": "rmyjjygxdpvb3MKzJ6S6",
              "gitlab_token_name": "Terraform_Token",
              "nfs_ip": "192.168.57.27",
              "nfs_password": "test123",
              "nfs_username": "ulak",
              "vm_name": "cem-topkaya-vm",
              "vm_user_name": "cem.topkaya",
              "vm_user_pass": "sifre123"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "user_data_xenial",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "980acf879c66e2abe1d7eb475dfc0f4edac8c3481f2114b42b468cb67e241faa",
            "rendered": "#cloud-config\npassword: sifre123\nchpasswd: { expire: False }\nssh_pwauth: True\nhostname: cem.topkaya\nmanage_etc_hosts: true\n\nwrite_files:\n  - path: /etc/cloud/cloud.cfg.d/99-custom-networking.cfg\n    permissions: '0644'\n    content: |\n      network: {config: disabled}\n\n  - path: /etc/update-motd.d/99-ulak-message\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"\"\n      echo \"░█░█░█░░░█▀█░█░█░░░█░█░█▀█░█▀▄░█▀▀░█▀▄░█░░░█▀▀░█▀▀░█▄█░█▀▀\"\n      echo \"░█░█░█░░░█▀█░█▀▄░░░█▀█░█▀█░█▀▄░█▀▀░█▀▄░█░░░█▀▀░▀▀█░█░█░█▀▀\"\n      echo \"░▀▀▀░▀▀▀░▀░▀░▀░▀░░░▀░▀░▀░▀░▀▀░░▀▀▀░▀░▀░▀▀▀░▀▀▀░▀▀▀░▀░▀░▀▀▀\"\n      echo \"\"\n      echo \"############################################ GELISTIRICIYE NOT ###############################################\"\n      echo \"\"\n      echo \"* Eğer makineyi yeni oluşturduysanız, programların tam olarak kurulabilmesi için yaklaşık 10 dakika bekleyin!\"\n      echo \"* Arka planda programların kurulumunu izlemek için aşağıdaki komutla günlük kayılarına bakabilirsiniz.\"\n      echo \"* sudo tail -f /var/log/cloud-init-output.log\"\n      echo \"* Programlar kurulduktan sonra makineyi kullanmaya başlayabilirsiniz.\"\n      echo \"\"\n      echo \"##############################################################################################################\"\n\n  - path: /etc/netplan/new-config.yaml\n    permissions: '0644'\n    content: |\n      network:\n          version: 2\n          ethernets:\n              ens3:\n                  dhcp4: true\n                  nameservers:\n                      addresses:\n                      - 8.8.8.8\n\n  - path: /var/cache/docker_install.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- DOCKER INSTALLATION START ---------------------------------------------\"\n\n      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n      sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n      sudo apt-get update\n      apt-cache policy docker-ce\n      apt-get install -y docker-ce\n\n      sudo usermod -aG docker cem.topkaya\n\n      curl -L https://github.com/docker/compose/releases/download/1.26.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n      sudo chmod +x /usr/local/bin/docker-compose\n      docker-compose --version\n\n      cat \u003c\u003cEOF | sudo tee /etc/docker/daemon.json\n      {\n        \"insecure-registries\": [\"registry.ulakhaberlesme.com.tr\"],\n        \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n        \"log-driver\": \"json-file\",\n        \"log-opts\": {\n          \"max-size\": \"100m\"\n        },\n        \"storage-driver\": \"overlay2\"\n      }\n      EOF\n      sudo systemctl restart docker\n\n      echo \"____________________________________________________________________________________________ DOCKER INSTALLATION END\"\n\n  - path: /var/cache/kubernetes_install.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- K8S INSTALLATION STARTED ----------------------------------------------\"\n      swapoff -a\n      sudo sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab\n\n      cat \u003c\u003cEOL | sudo tee /etc/modules-load.d/containerd.conf\n      overlay\n      br_netfilter\n      EOL\n\n      sudo modprobe overlay\n      sudo modprobe br_netfilter\n      sudo modprobe nf_conntrack_proto_sctp\n\n      cat \u003c\u003cEOL | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf\n      net.bridge.bridge-nf-call-iptables  = 1\n      net.bridge.bridge-nf-call-ip6tables = 1\n      net.ipv4.ip_forward                 = 1\n      EOL\n\n      sudo sysctl --system\n      mkdir -p /etc/apt/keyrings\n      curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n      echo \"deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /\" | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\n      apt update\n      apt install -y kubelet kubeadm kubectl\n      apt-mark hold kubelet kubeadm kubectl\n\n      curl -L https://dl.k8s.io/release/v1.23.17/bin/linux/amd64/kubectl -o /tmp/kubectl \u0026\u0026 chmod +x /tmp/kubectl \u0026\u0026 mv /tmp/kubectl /usr/bin\n      curl -L https://dl.k8s.io/release/v1.23.17/bin/linux/amd64/kubeadm -o /tmp/kubeadm \u0026\u0026 chmod +x /tmp/kubeadm \u0026\u0026 mv /tmp/kubeadm /usr/bin\n      curl -L https://dl.k8s.io/release/v1.23.17/bin/linux/amd64/kubelet -o /tmp/kubelet \u0026\u0026 chmod +x /tmp/kubelet \u0026\u0026 mv /tmp/kubelet /usr/bin\n\n      systemctl restart kubelet\n\n      kubectl version\n      kubeadm version\n      kubelet --version\n\n      echo \"-------------------------------------------- ADD KUBERNETES ALIASES START ------------------------------------------\"\n\n      find /home -type f -name \".bashrc\" | while read -r file; do\n        echo 'KUBE_EDITOR=\"nano\"' \u003e\u003e $file\n        echo 'alias k=\"kubectl\"' \u003e\u003e $file\n        echo 'alias kp=\"kubectl get pods\"' \u003e\u003e $file\n        echo 'alias kd=\"kubectl describe\"' \u003e\u003e $file\n        echo 'alias kl=\"kubectl logs\"' \u003e\u003e $file\n        echo 'alias kg=\"kubectl get\"' \u003e\u003e $file\n        echo 'alias keit=\"kubectl exec -it\"' \u003e\u003e $file\n\n        echo 'alias k5=\"kubectl -n $(namespaces=$(kubectl get namespaces -o jsonpath='\"'\"'{.items[*].metadata.name}'\"'\"'); for namespace in $namespaces; do if [[ $namespace == *5gcn-deployment* ]]; then echo $namespace; fi; done)\"' \u003e\u003e $file\n        echo 'alias k5p=\"k5 get pods\"' \u003e\u003e $file\n        echo 'alias k5d=\"k5 describe\"' \u003e\u003e $file\n        echo 'alias k5l=\"k5 logs\"' \u003e\u003e $file\n\n        echo 'alias km=\"kubectl -n monitoring\"' \u003e\u003e $file\n        echo 'alias kmp=\"km get pods\"' \u003e\u003e $file\n        echo 'alias kmd=\"km describe\"' \u003e\u003e $file\n        echo 'alias kml=\"km logs\"' \u003e\u003e $file\n      done\n\n      find /root -type f -name \".bashrc\" | while read -r file; do\n        echo 'KUBE_EDITOR=\"nano\"' \u003e\u003e $file\n        echo 'alias k=\"kubectl\"' \u003e\u003e $file\n        echo 'alias kp=\"kubectl get pods\"' \u003e\u003e $file\n        echo 'alias kd=\"kubectl describe\"' \u003e\u003e $file\n        echo 'alias kl=\"kubectl logs\"' \u003e\u003e $file\n        echo 'alias kg=\"kubectl get\"' \u003e\u003e $file\n        echo 'alias keit=\"kubectl exec -it\"' \u003e\u003e $file\n\n        echo 'alias k5=\"kubectl -n $(namespaces=$(kubectl get namespaces -o jsonpath='\"'\"'{.items[*].metadata.name}'\"'\"'); for namespace in $namespaces; do if [[ $namespace == *5gcn-deployment* ]]; then echo $namespace; fi; done)\"' \u003e\u003e $file\n        echo 'alias k5p=\"k5 get pods\"' \u003e\u003e $file\n        echo 'alias k5d=\"k5 describe\"' \u003e\u003e $file\n        echo 'alias k5l=\"k5 logs\"' \u003e\u003e $file\n\n        echo 'alias km=\"kubectl -n monitoring\"' \u003e\u003e $file\n        echo 'alias kmp=\"km get pods\"' \u003e\u003e $file\n        echo 'alias kmd=\"km describe\"' \u003e\u003e $file\n        echo 'alias kml=\"km logs\"' \u003e\u003e $file\n      done\n\n      echo \"_________________________________________________________________________________________ ADD KUBERNETES ALIASES END\"\n\n      echo \"_______________________________________________________________________________________________ K8s INSTALLATION END\"\n\n  - path: /var/cache/kubernetes_cluster_setup.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- KUBEADM CLUSTER SETUP START -------------------------------------------\"\n\n      echo \"-------------------------------------------- KUBEADM INIT START ----------------------------------------------------\"\n      sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --v=5 --ignore-preflight-errors=all\n      echo \"___________________________________________________________________________________________________ KUBEADM INIT END\"\n\n      echo \"-------------------------------------------- KUBECTL cem.topkaya MKDIR START ---------------------------------------\"\n      sudo mkdir -p /home/cem.topkaya/.kube\n      sudo cp -i /etc/kubernetes/admin.conf /home/cem.topkaya/.kube/config\n      sudo chown cem.topkaya:cem.topkaya /home/cem.topkaya/.kube/config\n      echo \"____________________________________________________________________________________________ KUBECTL cem.topkaya MKDIR END\"\n\n      echo \"-------------------------------------------- KUBECTL ROOT MKDIR START ----------------------------------------------\"\n      sudo mkdir -p /root/.kube\n      sudo cp -i /etc/kubernetes/admin.conf /root/.kube/config\n      sudo chown root:root /root/.kube/config\n      echo \"____________________________________________________________________________________________ KUBECTL ROOT MKDIR END\"\n\n      echo \"-------------------------------------------- KUBECTL ROOTPATH MKDIR START ------------------------------------------\"\n      sudo mkdir -p /.kube\n      sudo cp -i /etc/kubernetes/admin.conf /.kube/config\n      sudo chown cem.topkaya:cem.topkaya /.kube/config\n      echo \"_________________________________________________________________________________________ KUBECTL ROOTPATH MKDIR END\"\n\n      echo \"-------------------------------------------- KUBECTL NETWORK INSTALL START -----------------------------------------\"\n      kubectl --kubeconfig /.kube/config apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n      kubectl --kubeconfig /.kube/config taint nodes --all node-role.kubernetes.io/master-\n      echo \"________________________________________________________________________________________ KUBECTL NETWORK INSTALL END\"\n\n      echo \"-------------------------------------------- UPDATE KUBELET CONFIG START -------------------------------------------\"\n      yq eval -i '.spec.containers[0].command += \"--service-node-port-range=30000-39000\"' /etc/kubernetes/manifests/kube-apiserver.yaml\n      systemctl restart kubelet\n      echo \"__________________________________________________________________________________________ UPDATE KUBELET CONFIG END\"\n\n      echo \"__________________________________________________________________________________________ KUBEADM CLUSTER SETUP END\"\n\n  - path: /var/cache/helm_install.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- HELM INSTALLATION START --------------------------------------------\"\n\n      curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n      chmod +x get_helm.sh\n      ./get_helm.sh\n      helm repo add chartmuseum http://helmchart.ulakhaberlesme.com.tr\n      helm repo update\n\n      echo \"-------------------------------------------- HELM REPO CONFIG START --------------------------------------------\"\n\n      mkdir -p /root/.config/helm\n      mkdir -p /root/.cache/helm\n      sudo cp -R /.config/helm/* /root/.config/helm\n      sudo cp -R /.cache/helm/* /root/.cache/helm\n      sudo chmod 777 /root/.config/helm/*\n      sudo chmod 777 /root/.cache/helm/*\n\n      mkdir -p /home/cem.topkaya/.config/helm\n      mkdir -p /home/cem.topkaya/.cache/helm\n      sudo cp -R /.config/helm/* /home/cem.topkaya/.config/helm\n      sudo cp -R /.cache/helm/* /home/cem.topkaya/.cache/helm\n      sudo chmod 777 /home/cem.topkaya/.config/helm/*\n      sudo chmod 777 /home/cem.topkaya/.cache/helm/*\n\n      echo \"____________________________________________________________________________________________ HELM REPO CONFIG END\"\n\n      echo \"-------------------------------------------- ADD HELM ALIASES START --------------------------------------------\"\n\n      find /home -type f -name \".bashrc\" | while read -r file; do\n        echo 'alias hi=\"helm install\"' \u003e\u003e $file\n        echo 'alias hu=\"helm uninstall\"' \u003e\u003e $file\n\n        echo 'alias hm=\"helm -n monitoring\"' \u003e\u003e $file\n        echo 'alias hmi=\"hm install\"' \u003e\u003e $file\n        echo 'alias hmu=\"hm uninstall\"' \u003e\u003e $file\n\n        echo 'alias h5=\"helm -n $(namespaces=$(kubectl get namespaces -o jsonpath='\"'\"'{.items[*].metadata.name}'\"'\"'); for namespace in $namespaces; do if [[ $namespace == *5gcn-deployment* ]]; then echo $namespace; fi; done)\"' \u003e\u003e $file\n        echo 'alias h5i=\"h5 install\"' \u003e\u003e $file\n        echo 'alias h5u=\"h5 uninstall\"' \u003e\u003e $file\n      done\n\n      find /root -type f -name \".bashrc\" | while read -r file; do\n        echo 'alias hi=\"helm install\"' \u003e\u003e $file\n        echo 'alias hu=\"helm uninstall\"' \u003e\u003e $file\n\n        echo 'alias hm=\"helm -n monitoring\"' \u003e\u003e $file\n        echo 'alias hmi=\"hm install\"' \u003e\u003e $file\n        echo 'alias hmu=\"hm uninstall\"' \u003e\u003e $file\n\n        echo 'alias h5=\"helm -n $(namespaces=$(kubectl get namespaces -o jsonpath='\"'\"'{.items[*].metadata.name}'\"'\"'); for namespace in $namespaces; do if [[ $namespace == *5gcn-deployment* ]]; then echo $namespace; fi; done)\"' \u003e\u003e $file\n        echo 'alias h5i=\"h5 install\"' \u003e\u003e $file\n        echo 'alias h5u=\"h5 uninstall\"' \u003e\u003e $file\n      done\n\n      echo \"____________________________________________________________________________________________ ADD HELM ALIASES END\"\n\n      echo \"____________________________________________________________________________________________ HELM INSTALLATION ENDED\"\n\n  - path: /var/cache/nfs_configure.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- NFS CONFIGURATION START -----------------------------------------------\"\n      # Configure NFS to allow data storage from new VM\n      sshpass -p test123 ssh -o StrictHostKeyChecking=no ulak@192.168.57.27 'echo \"/mnt/nfs 192.168.13.53(rw,sync,no_root_squash,no_subtree_check)\" \u003e\u003e /etc/exports'\n      sshpass -p test123 ssh -o StrictHostKeyChecking=no ulak@192.168.57.27 'sudo exportfs -a'\n      echo \"____________________________________________________________________________________________ NFS CONFIGURATION END\"\n\n      echo \"---------------------------------------------- CLONE HELMCHART REPO START ------------------------------------------\"\n      # Clone HelmChart Repository\n      git clone http://Terraform_Token:rmyjjygxdpvb3MKzJ6S6@gitlab.ulakhaberlesme.com.tr/DevOps/5gcn-helmchart.git 5gcn_helmchart\n\n      # Apply NFS Provisioner Pod\n      cd /5gcn_helmchart/nfs-provisioner \u0026\u0026 kubectl --kubeconfig /.kube/config apply -k .\n      echo \"___________________________________________________________________________________________ CLONE HELMCHART REPO END\"\n\n  - path: /var/cache/instal_ubuntu_desktop.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- UBUNTU-DESKTOP INSTALLATION START -----------------------------------\"\n      sudo apt install ubuntu-desktop -y\n      sudo apt install xrdp -y\n      sudo ufw allow 3389\n      sudo reboot\n      echo \"__________________________________________________________________________________ UBUNTU-DESKTOP INSTALLATION END\"\n\n  - path: /var/cache/installation_test.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- INSTALLATION START ----------------------------------------------------\"\n\n      sudo sed -i 's/^nameserver .*/nameserver 192.168.10.12/' /etc/resolv.conf\n\n      # Zaman dilimi ayarlanıyor\n      echo \"-------------------------------------------- SETTING DATE/TIME ------------------------------------------------------\"\n      sudo timedatectl set-ntp yes\n      sudo timedatectl set-timezone \"Asia/Istanbul\"\n\n      echo \"-------------------------------------------- USER CONFIG START -----------------------------------------------------\"\n      useradd -m -s /bin/bash cem.topkaya\n      echo cem.topkaya:sifre123 | sudo chpasswd\n\n      # /etc/sudoers.d/cem.topkaya Dosyasını yaratarak sudoers dosyasında yapılacak bir hatanın önüne geçiyoruz\n      echo \"cem.topkaya  ALL=(ALL:ALL) NOPASSWD:ALL\" | sudo tee --append /etc/sudoers\n      [ $? -eq 0 ] \u0026\u0026 echo \"Sudoers command was successful.\" || echo \"Sudoers command failed.\"\n      echo \"____________________________________________________________________________________________________ USER CONFIG END\"\n\n      echo \"-------------------------------------------- COMMON SOFTWARE INSTALLATION START ------------------------------------\"\n      apt-get update -y\n      apt-get upgrade -y\n      apt-get install -y apt-transport-https curl wget ca-certificates software-properties-common net-tools vim nano git build-essential sshpass nfs-common htop tree\n      wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 \u0026\u0026 chmod +x /usr/local/bin/yq\n      echo \"___________________________________________________________________________________ COMMON SOFTWARE INSTALLATION END\"\n\n      dockerInstalled=false\n      kubernetesInstalled=false\n      clusterSetup=false\n\n      installDocker=false\n      installKubernetes=false\n      setupKubernetesCluster=false\n      installHelm=false\n      configureNFS=false\n\n      if [[ \"\" == *\"INSTALL_DOCKER\"* ]]; then\n        echo \"Docker Installation Enabled.\"\n        installDocker=true\n      fi\n\n      if [[ \"\" == *\"INSTALL_KUBERNETES\"* ]]; then\n        echo \"Kubernetes Installation Enabled.\"\n        installKubernetes=true\n      fi\n\n      if [[ \"\" == *\"SETUP_KUBERNETES_CLUSTER\"* ]]; then\n        echo \"Kubernetes Cluster Setup Enabled.\"\n        setupKubernetesCluster=true\n      fi\n\n      if [[ \"\" == *\"CONFIGURE_NFS\"* ]]; then\n        echo \"NFS Configuration Enabled.\"\n        configureNFS=true\n      fi\n\n      if [[ \"\" == *\"INSTALL_HELM\"* ]]; then\n        echo \"Helm Installation Enabled.\"\n        installHelm=true\n      fi\n\n      if [[ $installDocker == true ]]; then\n        /var/cache/docker_install.sh\n        dockerInstalled=true\n      else\n        echo \"\u003e\u003e\u003e Skipping Docker Installation ...\"\n      fi\n\n      if [[ $installKubernetes == true ]]; then\n        if [[ $dockerInstalled == true ]]; then\n          /var/cache/kubernetes_install.sh\n          kubernetesInstalled=true\n        else\n          echo \"\u003e\u003e\u003e Error: Kubernetes Installation will abort because Docker is not installed ...\"\n          echo \"dockerInstalled: $dockerInstalled\"\n          echo \"kubernetesInstalled: $kubernetesInstalled\"\n          echo \"clusterSetup: $clusterSetup\"\n          exit 1\n        fi\n      else\n        echo \"\u003e\u003e\u003e Skipping Kubernetes Installation ...\"\n      fi\n\n      if [[ $setupKubernetesCluster == true ]]; then\n        if [[ $kubernetesInstalled == true ]]; then\n          /var/cache/kubernetes_cluster_setup.sh\n          clusterSetup=true\n        else\n          echo \"\u003e\u003e\u003e Error: Cluster Setup will abort because Kubernetes is not installed ...\"\n          echo \"dockerInstalled: $dockerInstalled\"\n          echo \"kubernetesInstalled: $kubernetesInstalled\"\n          echo \"clusterSetup: $clusterSetup\"\n          exit 1\n        fi\n      else\n        echo \"\u003e\u003e\u003e Skipping Kubernetes Cluster Setup ...\"\n      fi\n\n      if [[ $installHelm == true ]]; then\n        if [[ $kubernetesInstalled == true ]]; then\n          /var/cache/helm_install.sh\n        else\n          echo \"\u003e\u003e\u003e Error: Helm Installation will abort because Kubernetes is not installed ...\"\n          echo \"dockerInstalled: $dockerInstalled\"\n          echo \"kubernetesInstalled: $kubernetesInstalled\"\n          echo \"clusterSetup: $clusterSetup\"\n          exit 1\n        fi\n      else\n        echo \"\u003e\u003e\u003e Skipping Helm Installation ...\"\n      fi\n\n      if [[ $configureNFS == true ]]; then\n        if [[ $kubernetesInstalled == true \u0026\u0026 $clusterSetup == true ]]; then\n          /var/cache/nfs_configure.sh\n        else\n          echo \"\u003e\u003e\u003e Error: NFS Configuration will abort because Kubernetes is not installed ...\"\n          echo \"dockerInstalled: $dockerInstalled\"\n          echo \"kubernetesInstalled: $kubernetesInstalled\"\n          echo \"clusterSetup: $clusterSetup\"\n          exit 1\n        fi\n      else\n        echo \"\u003e\u003e\u003e Skipping NFS Configuration ...\"\n      fi\n\n      # Kurulum sonrası reboot olacağı için en son geldi\n      if [[ \"\" == *\"UBUNTU_DESKTOP\"* ]]; then      \n        echo \"Ubuntu Desktop Installation Enabled.\"\n        /var/cache/instal_ubuntu_desktop.sh\n      fi\n      echo \"_________________________________________________________________________________________________ INSTALLATION ENDED\"\n\nruncmd:\n  - [bash, '/var/cache/installation_test.sh']\n",
            "template": "#cloud-config\npassword: ${vm_user_pass}\nchpasswd: { expire: False }\nssh_pwauth: True\nhostname: ${vm_user_name}\nmanage_etc_hosts: true\n\nwrite_files:\n  - path: /etc/cloud/cloud.cfg.d/99-custom-networking.cfg\n    permissions: '0644'\n    content: |\n      network: {config: disabled}\n\n  - path: /etc/update-motd.d/99-ulak-message\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"\"\n      echo \"░█░█░█░░░█▀█░█░█░░░█░█░█▀█░█▀▄░█▀▀░█▀▄░█░░░█▀▀░█▀▀░█▄█░█▀▀\"\n      echo \"░█░█░█░░░█▀█░█▀▄░░░█▀█░█▀█░█▀▄░█▀▀░█▀▄░█░░░█▀▀░▀▀█░█░█░█▀▀\"\n      echo \"░▀▀▀░▀▀▀░▀░▀░▀░▀░░░▀░▀░▀░▀░▀▀░░▀▀▀░▀░▀░▀▀▀░▀▀▀░▀▀▀░▀░▀░▀▀▀\"\n      echo \"\"\n      echo \"############################################ GELISTIRICIYE NOT ###############################################\"\n      echo \"\"\n      echo \"* Eğer makineyi yeni oluşturduysanız, programların tam olarak kurulabilmesi için yaklaşık 10 dakika bekleyin!\"\n      echo \"* Arka planda programların kurulumunu izlemek için aşağıdaki komutla günlük kayılarına bakabilirsiniz.\"\n      echo \"* sudo tail -f /var/log/cloud-init-output.log\"\n      echo \"* Programlar kurulduktan sonra makineyi kullanmaya başlayabilirsiniz.\"\n      echo \"\"\n      echo \"##############################################################################################################\"\n\n  - path: /etc/netplan/new-config.yaml\n    permissions: '0644'\n    content: |\n      network:\n          version: 2\n          ethernets:\n              ens3:\n                  dhcp4: true\n                  nameservers:\n                      addresses:\n                      - 8.8.8.8\n\n  - path: /var/cache/docker_install.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- DOCKER INSTALLATION START ---------------------------------------------\"\n\n      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n      sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n      sudo apt-get update\n      apt-cache policy docker-ce\n      apt-get install -y docker-ce\n\n      sudo usermod -aG docker ${vm_user_name}\n\n      curl -L https://github.com/docker/compose/releases/download/1.26.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n      sudo chmod +x /usr/local/bin/docker-compose\n      docker-compose --version\n\n      cat \u003c\u003cEOF | sudo tee /etc/docker/daemon.json\n      {\n        \"insecure-registries\": [\"registry.ulakhaberlesme.com.tr\"],\n        \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n        \"log-driver\": \"json-file\",\n        \"log-opts\": {\n          \"max-size\": \"100m\"\n        },\n        \"storage-driver\": \"overlay2\"\n      }\n      EOF\n      sudo systemctl restart docker\n\n      echo \"____________________________________________________________________________________________ DOCKER INSTALLATION END\"\n\n  - path: /var/cache/kubernetes_install.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- K8S INSTALLATION STARTED ----------------------------------------------\"\n      swapoff -a\n      sudo sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab\n\n      cat \u003c\u003cEOL | sudo tee /etc/modules-load.d/containerd.conf\n      overlay\n      br_netfilter\n      EOL\n\n      sudo modprobe overlay\n      sudo modprobe br_netfilter\n      sudo modprobe nf_conntrack_proto_sctp\n\n      cat \u003c\u003cEOL | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf\n      net.bridge.bridge-nf-call-iptables  = 1\n      net.bridge.bridge-nf-call-ip6tables = 1\n      net.ipv4.ip_forward                 = 1\n      EOL\n\n      sudo sysctl --system\n      mkdir -p /etc/apt/keyrings\n      curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n      echo \"deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /\" | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\n      apt update\n      apt install -y kubelet kubeadm kubectl\n      apt-mark hold kubelet kubeadm kubectl\n\n      curl -L https://dl.k8s.io/release/v1.23.17/bin/linux/amd64/kubectl -o /tmp/kubectl \u0026\u0026 chmod +x /tmp/kubectl \u0026\u0026 mv /tmp/kubectl /usr/bin\n      curl -L https://dl.k8s.io/release/v1.23.17/bin/linux/amd64/kubeadm -o /tmp/kubeadm \u0026\u0026 chmod +x /tmp/kubeadm \u0026\u0026 mv /tmp/kubeadm /usr/bin\n      curl -L https://dl.k8s.io/release/v1.23.17/bin/linux/amd64/kubelet -o /tmp/kubelet \u0026\u0026 chmod +x /tmp/kubelet \u0026\u0026 mv /tmp/kubelet /usr/bin\n\n      systemctl restart kubelet\n\n      kubectl version\n      kubeadm version\n      kubelet --version\n\n      echo \"-------------------------------------------- ADD KUBERNETES ALIASES START ------------------------------------------\"\n\n      find /home -type f -name \".bashrc\" | while read -r file; do\n        echo 'KUBE_EDITOR=\"nano\"' \u003e\u003e $file\n        echo 'alias k=\"kubectl\"' \u003e\u003e $file\n        echo 'alias kp=\"kubectl get pods\"' \u003e\u003e $file\n        echo 'alias kd=\"kubectl describe\"' \u003e\u003e $file\n        echo 'alias kl=\"kubectl logs\"' \u003e\u003e $file\n        echo 'alias kg=\"kubectl get\"' \u003e\u003e $file\n        echo 'alias keit=\"kubectl exec -it\"' \u003e\u003e $file\n\n        echo 'alias k5=\"kubectl -n $(namespaces=$(kubectl get namespaces -o jsonpath='\"'\"'{.items[*].metadata.name}'\"'\"'); for namespace in $namespaces; do if [[ $namespace == *5gcn-deployment* ]]; then echo $namespace; fi; done)\"' \u003e\u003e $file\n        echo 'alias k5p=\"k5 get pods\"' \u003e\u003e $file\n        echo 'alias k5d=\"k5 describe\"' \u003e\u003e $file\n        echo 'alias k5l=\"k5 logs\"' \u003e\u003e $file\n\n        echo 'alias km=\"kubectl -n monitoring\"' \u003e\u003e $file\n        echo 'alias kmp=\"km get pods\"' \u003e\u003e $file\n        echo 'alias kmd=\"km describe\"' \u003e\u003e $file\n        echo 'alias kml=\"km logs\"' \u003e\u003e $file\n      done\n\n      find /root -type f -name \".bashrc\" | while read -r file; do\n        echo 'KUBE_EDITOR=\"nano\"' \u003e\u003e $file\n        echo 'alias k=\"kubectl\"' \u003e\u003e $file\n        echo 'alias kp=\"kubectl get pods\"' \u003e\u003e $file\n        echo 'alias kd=\"kubectl describe\"' \u003e\u003e $file\n        echo 'alias kl=\"kubectl logs\"' \u003e\u003e $file\n        echo 'alias kg=\"kubectl get\"' \u003e\u003e $file\n        echo 'alias keit=\"kubectl exec -it\"' \u003e\u003e $file\n\n        echo 'alias k5=\"kubectl -n $(namespaces=$(kubectl get namespaces -o jsonpath='\"'\"'{.items[*].metadata.name}'\"'\"'); for namespace in $namespaces; do if [[ $namespace == *5gcn-deployment* ]]; then echo $namespace; fi; done)\"' \u003e\u003e $file\n        echo 'alias k5p=\"k5 get pods\"' \u003e\u003e $file\n        echo 'alias k5d=\"k5 describe\"' \u003e\u003e $file\n        echo 'alias k5l=\"k5 logs\"' \u003e\u003e $file\n\n        echo 'alias km=\"kubectl -n monitoring\"' \u003e\u003e $file\n        echo 'alias kmp=\"km get pods\"' \u003e\u003e $file\n        echo 'alias kmd=\"km describe\"' \u003e\u003e $file\n        echo 'alias kml=\"km logs\"' \u003e\u003e $file\n      done\n\n      echo \"_________________________________________________________________________________________ ADD KUBERNETES ALIASES END\"\n\n      echo \"_______________________________________________________________________________________________ K8s INSTALLATION END\"\n\n  - path: /var/cache/kubernetes_cluster_setup.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- KUBEADM CLUSTER SETUP START -------------------------------------------\"\n\n      echo \"-------------------------------------------- KUBEADM INIT START ----------------------------------------------------\"\n      sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --v=5 --ignore-preflight-errors=all\n      echo \"___________________________________________________________________________________________________ KUBEADM INIT END\"\n\n      echo \"-------------------------------------------- KUBECTL ${vm_user_name} MKDIR START ---------------------------------------\"\n      sudo mkdir -p /home/${vm_user_name}/.kube\n      sudo cp -i /etc/kubernetes/admin.conf /home/${vm_user_name}/.kube/config\n      sudo chown ${vm_user_name}:${vm_user_name} /home/${vm_user_name}/.kube/config\n      echo \"____________________________________________________________________________________________ KUBECTL ${vm_user_name} MKDIR END\"\n\n      echo \"-------------------------------------------- KUBECTL ROOT MKDIR START ----------------------------------------------\"\n      sudo mkdir -p /root/.kube\n      sudo cp -i /etc/kubernetes/admin.conf /root/.kube/config\n      sudo chown root:root /root/.kube/config\n      echo \"____________________________________________________________________________________________ KUBECTL ROOT MKDIR END\"\n\n      echo \"-------------------------------------------- KUBECTL ROOTPATH MKDIR START ------------------------------------------\"\n      sudo mkdir -p /.kube\n      sudo cp -i /etc/kubernetes/admin.conf /.kube/config\n      sudo chown ${vm_user_name}:${vm_user_name} /.kube/config\n      echo \"_________________________________________________________________________________________ KUBECTL ROOTPATH MKDIR END\"\n\n      echo \"-------------------------------------------- KUBECTL NETWORK INSTALL START -----------------------------------------\"\n      kubectl --kubeconfig /.kube/config apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n      kubectl --kubeconfig /.kube/config taint nodes --all node-role.kubernetes.io/master-\n      echo \"________________________________________________________________________________________ KUBECTL NETWORK INSTALL END\"\n\n      echo \"-------------------------------------------- UPDATE KUBELET CONFIG START -------------------------------------------\"\n      yq eval -i '.spec.containers[0].command += \"--service-node-port-range=30000-39000\"' /etc/kubernetes/manifests/kube-apiserver.yaml\n      systemctl restart kubelet\n      echo \"__________________________________________________________________________________________ UPDATE KUBELET CONFIG END\"\n\n      echo \"__________________________________________________________________________________________ KUBEADM CLUSTER SETUP END\"\n\n  - path: /var/cache/helm_install.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- HELM INSTALLATION START --------------------------------------------\"\n\n      curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n      chmod +x get_helm.sh\n      ./get_helm.sh\n      helm repo add chartmuseum http://helmchart.ulakhaberlesme.com.tr\n      helm repo update\n\n      echo \"-------------------------------------------- HELM REPO CONFIG START --------------------------------------------\"\n\n      mkdir -p /root/.config/helm\n      mkdir -p /root/.cache/helm\n      sudo cp -R /.config/helm/* /root/.config/helm\n      sudo cp -R /.cache/helm/* /root/.cache/helm\n      sudo chmod 777 /root/.config/helm/*\n      sudo chmod 777 /root/.cache/helm/*\n\n      mkdir -p /home/${vm_user_name}/.config/helm\n      mkdir -p /home/${vm_user_name}/.cache/helm\n      sudo cp -R /.config/helm/* /home/${vm_user_name}/.config/helm\n      sudo cp -R /.cache/helm/* /home/${vm_user_name}/.cache/helm\n      sudo chmod 777 /home/${vm_user_name}/.config/helm/*\n      sudo chmod 777 /home/${vm_user_name}/.cache/helm/*\n\n      echo \"____________________________________________________________________________________________ HELM REPO CONFIG END\"\n\n      echo \"-------------------------------------------- ADD HELM ALIASES START --------------------------------------------\"\n\n      find /home -type f -name \".bashrc\" | while read -r file; do\n        echo 'alias hi=\"helm install\"' \u003e\u003e $file\n        echo 'alias hu=\"helm uninstall\"' \u003e\u003e $file\n\n        echo 'alias hm=\"helm -n monitoring\"' \u003e\u003e $file\n        echo 'alias hmi=\"hm install\"' \u003e\u003e $file\n        echo 'alias hmu=\"hm uninstall\"' \u003e\u003e $file\n\n        echo 'alias h5=\"helm -n $(namespaces=$(kubectl get namespaces -o jsonpath='\"'\"'{.items[*].metadata.name}'\"'\"'); for namespace in $namespaces; do if [[ $namespace == *5gcn-deployment* ]]; then echo $namespace; fi; done)\"' \u003e\u003e $file\n        echo 'alias h5i=\"h5 install\"' \u003e\u003e $file\n        echo 'alias h5u=\"h5 uninstall\"' \u003e\u003e $file\n      done\n\n      find /root -type f -name \".bashrc\" | while read -r file; do\n        echo 'alias hi=\"helm install\"' \u003e\u003e $file\n        echo 'alias hu=\"helm uninstall\"' \u003e\u003e $file\n\n        echo 'alias hm=\"helm -n monitoring\"' \u003e\u003e $file\n        echo 'alias hmi=\"hm install\"' \u003e\u003e $file\n        echo 'alias hmu=\"hm uninstall\"' \u003e\u003e $file\n\n        echo 'alias h5=\"helm -n $(namespaces=$(kubectl get namespaces -o jsonpath='\"'\"'{.items[*].metadata.name}'\"'\"'); for namespace in $namespaces; do if [[ $namespace == *5gcn-deployment* ]]; then echo $namespace; fi; done)\"' \u003e\u003e $file\n        echo 'alias h5i=\"h5 install\"' \u003e\u003e $file\n        echo 'alias h5u=\"h5 uninstall\"' \u003e\u003e $file\n      done\n\n      echo \"____________________________________________________________________________________________ ADD HELM ALIASES END\"\n\n      echo \"____________________________________________________________________________________________ HELM INSTALLATION ENDED\"\n\n  - path: /var/cache/nfs_configure.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- NFS CONFIGURATION START -----------------------------------------------\"\n      # Configure NFS to allow data storage from new VM\n      sshpass -p ${nfs_password} ssh -o StrictHostKeyChecking=no ${nfs_username}@${nfs_ip} 'echo \"/mnt/nfs ${fipp}(rw,sync,no_root_squash,no_subtree_check)\" \u003e\u003e /etc/exports'\n      sshpass -p ${nfs_password} ssh -o StrictHostKeyChecking=no ${nfs_username}@${nfs_ip} 'sudo exportfs -a'\n      echo \"____________________________________________________________________________________________ NFS CONFIGURATION END\"\n\n      echo \"---------------------------------------------- CLONE HELMCHART REPO START ------------------------------------------\"\n      # Clone HelmChart Repository\n      git clone http://${gitlab_token_name}:${gitlab_token}@gitlab.ulakhaberlesme.com.tr/DevOps/5gcn-helmchart.git 5gcn_helmchart\n\n      # Apply NFS Provisioner Pod\n      cd /5gcn_helmchart/nfs-provisioner \u0026\u0026 kubectl --kubeconfig /.kube/config apply -k .\n      echo \"___________________________________________________________________________________________ CLONE HELMCHART REPO END\"\n\n  - path: /var/cache/instal_ubuntu_desktop.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- UBUNTU-DESKTOP INSTALLATION START -----------------------------------\"\n      sudo apt install ubuntu-desktop -y\n      sudo apt install xrdp -y\n      sudo ufw allow 3389\n      sudo reboot\n      echo \"__________________________________________________________________________________ UBUNTU-DESKTOP INSTALLATION END\"\n\n  - path: /var/cache/installation_test.sh\n    owner: root:root\n    permissions: '0755'\n    content: |\n      #!/bin/bash\n      echo \"-------------------------------------------- INSTALLATION START ----------------------------------------------------\"\n\n      sudo sed -i 's/^nameserver .*/nameserver 192.168.10.12/' /etc/resolv.conf\n\n      # Zaman dilimi ayarlanıyor\n      echo \"-------------------------------------------- SETTING DATE/TIME ------------------------------------------------------\"\n      sudo timedatectl set-ntp yes\n      sudo timedatectl set-timezone \"Asia/Istanbul\"\n\n      echo \"-------------------------------------------- USER CONFIG START -----------------------------------------------------\"\n      useradd -m -s /bin/bash ${vm_user_name}\n      echo ${vm_user_name}:${vm_user_pass} | sudo chpasswd\n\n      # /etc/sudoers.d/${vm_user_name} Dosyasını yaratarak sudoers dosyasında yapılacak bir hatanın önüne geçiyoruz\n      echo \"${vm_user_name}  ALL=(ALL:ALL) NOPASSWD:ALL\" | sudo tee --append /etc/sudoers\n      [ $? -eq 0 ] \u0026\u0026 echo \"Sudoers command was successful.\" || echo \"Sudoers command failed.\"\n      echo \"____________________________________________________________________________________________________ USER CONFIG END\"\n\n      echo \"-------------------------------------------- COMMON SOFTWARE INSTALLATION START ------------------------------------\"\n      apt-get update -y\n      apt-get upgrade -y\n      apt-get install -y ${common_packages}\n      wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 \u0026\u0026 chmod +x /usr/local/bin/yq\n      echo \"___________________________________________________________________________________ COMMON SOFTWARE INSTALLATION END\"\n\n      dockerInstalled=false\n      kubernetesInstalled=false\n      clusterSetup=false\n\n      installDocker=false\n      installKubernetes=false\n      setupKubernetesCluster=false\n      installHelm=false\n      configureNFS=false\n\n      if [[ \"${components}\" == *\"INSTALL_DOCKER\"* ]]; then\n        echo \"Docker Installation Enabled.\"\n        installDocker=true\n      fi\n\n      if [[ \"${components}\" == *\"INSTALL_KUBERNETES\"* ]]; then\n        echo \"Kubernetes Installation Enabled.\"\n        installKubernetes=true\n      fi\n\n      if [[ \"${components}\" == *\"SETUP_KUBERNETES_CLUSTER\"* ]]; then\n        echo \"Kubernetes Cluster Setup Enabled.\"\n        setupKubernetesCluster=true\n      fi\n\n      if [[ \"${components}\" == *\"CONFIGURE_NFS\"* ]]; then\n        echo \"NFS Configuration Enabled.\"\n        configureNFS=true\n      fi\n\n      if [[ \"${components}\" == *\"INSTALL_HELM\"* ]]; then\n        echo \"Helm Installation Enabled.\"\n        installHelm=true\n      fi\n\n      if [[ $installDocker == true ]]; then\n        /var/cache/docker_install.sh\n        dockerInstalled=true\n      else\n        echo \"\u003e\u003e\u003e Skipping Docker Installation ...\"\n      fi\n\n      if [[ $installKubernetes == true ]]; then\n        if [[ $dockerInstalled == true ]]; then\n          /var/cache/kubernetes_install.sh\n          kubernetesInstalled=true\n        else\n          echo \"\u003e\u003e\u003e Error: Kubernetes Installation will abort because Docker is not installed ...\"\n          echo \"dockerInstalled: $dockerInstalled\"\n          echo \"kubernetesInstalled: $kubernetesInstalled\"\n          echo \"clusterSetup: $clusterSetup\"\n          exit 1\n        fi\n      else\n        echo \"\u003e\u003e\u003e Skipping Kubernetes Installation ...\"\n      fi\n\n      if [[ $setupKubernetesCluster == true ]]; then\n        if [[ $kubernetesInstalled == true ]]; then\n          /var/cache/kubernetes_cluster_setup.sh\n          clusterSetup=true\n        else\n          echo \"\u003e\u003e\u003e Error: Cluster Setup will abort because Kubernetes is not installed ...\"\n          echo \"dockerInstalled: $dockerInstalled\"\n          echo \"kubernetesInstalled: $kubernetesInstalled\"\n          echo \"clusterSetup: $clusterSetup\"\n          exit 1\n        fi\n      else\n        echo \"\u003e\u003e\u003e Skipping Kubernetes Cluster Setup ...\"\n      fi\n\n      if [[ $installHelm == true ]]; then\n        if [[ $kubernetesInstalled == true ]]; then\n          /var/cache/helm_install.sh\n        else\n          echo \"\u003e\u003e\u003e Error: Helm Installation will abort because Kubernetes is not installed ...\"\n          echo \"dockerInstalled: $dockerInstalled\"\n          echo \"kubernetesInstalled: $kubernetesInstalled\"\n          echo \"clusterSetup: $clusterSetup\"\n          exit 1\n        fi\n      else\n        echo \"\u003e\u003e\u003e Skipping Helm Installation ...\"\n      fi\n\n      if [[ $configureNFS == true ]]; then\n        if [[ $kubernetesInstalled == true \u0026\u0026 $clusterSetup == true ]]; then\n          /var/cache/nfs_configure.sh\n        else\n          echo \"\u003e\u003e\u003e Error: NFS Configuration will abort because Kubernetes is not installed ...\"\n          echo \"dockerInstalled: $dockerInstalled\"\n          echo \"kubernetesInstalled: $kubernetesInstalled\"\n          echo \"clusterSetup: $clusterSetup\"\n          exit 1\n        fi\n      else\n        echo \"\u003e\u003e\u003e Skipping NFS Configuration ...\"\n      fi\n\n      # Kurulum sonrası reboot olacağı için en son geldi\n      if [[ \"${components}\" == *\"UBUNTU_DESKTOP\"* ]]; then      \n        echo \"Ubuntu Desktop Installation Enabled.\"\n        /var/cache/instal_ubuntu_desktop.sh\n      fi\n      echo \"_________________________________________________________________________________________________ INSTALLATION ENDED\"\n\nruncmd:\n  - [bash, '/var/cache/installation_test.sh']\n",
            "vars": {
              "common_packages": "apt-transport-https curl wget ca-certificates software-properties-common net-tools vim nano git build-essential sshpass nfs-common htop tree",
              "components": "",
              "fipp": "192.168.13.53",
              "gitlab_token": "rmyjjygxdpvb3MKzJ6S6",
              "gitlab_token_name": "Terraform_Token",
              "nfs_ip": "192.168.57.27",
              "nfs_password": "test123",
              "nfs_username": "ulak",
              "vm_name": "cem-topkaya-vm",
              "vm_user_name": "cem.topkaya",
              "vm_user_pass": "sifre123"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "openstack_compute_instance_v2",
      "name": "vm_2",
      "provider": "provider[\"registry.terraform.io/terraform-provider-openstack/openstack\"]",
      "instances": [
        {
          "status": "tainted",
          "schema_version": 0,
          "attributes": {
            "access_ip_v4": null,
            "access_ip_v6": null,
            "admin_pass": null,
            "all_metadata": null,
            "all_tags": [],
            "availability_zone": "com115",
            "availability_zone_hints": null,
            "block_device": [],
            "config_drive": null,
            "created": null,
            "flavor_id": null,
            "flavor_name": "2C_4R_20D",
            "floating_ip": null,
            "force_delete": false,
            "id": "98b37680-8dfe-44ad-8913-5086e1b3275d",
            "image_id": null,
            "image_name": "Ubuntu22_04",
            "key_pair": null,
            "metadata": {
              "assigned_to": "cem.topkaya",
              "created_by": "cem.topkaya",
              "delete_after": "24h",
              "description": "cem.topkaya dev makinesi",
              "email": "cem.topkaya@ulakhaberlesme.com.tr",
              "flavor": "2C_4R_20D",
              "project_name": "Development"
            },
            "name": "cem-topkaya-vm",
            "network": [
              {
                "access_network": false,
                "fixed_ip_v4": "",
                "fixed_ip_v6": "",
                "floating_ip": "",
                "mac": "",
                "name": "cinar-mgmt",
                "port": "",
                "uuid": ""
              },
              {
                "access_network": false,
                "fixed_ip_v4": "",
                "fixed_ip_v6": "",
                "floating_ip": "",
                "mac": "",
                "name": "cinar-control",
                "port": "",
                "uuid": ""
              },
              {
                "access_network": false,
                "fixed_ip_v4": "",
                "fixed_ip_v6": "",
                "floating_ip": "",
                "mac": "",
                "name": "cinar-public",
                "port": "",
                "uuid": ""
              },
              {
                "access_network": false,
                "fixed_ip_v4": "",
                "fixed_ip_v6": "",
                "floating_ip": "",
                "mac": "",
                "name": "cinar-data",
                "port": "",
                "uuid": ""
              }
            ],
            "network_mode": null,
            "personality": [],
            "power_state": "active",
            "region": null,
            "scheduler_hints": [],
            "security_groups": [
              "default"
            ],
            "stop_before_destroy": false,
            "tags": null,
            "timeouts": null,
            "updated": null,
            "user_data": "e7ceda15d7fe1a4e184597c416e70b7bc4bf36f7",
            "vendor_options": [],
            "volume": []
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH19",
          "dependencies": [
            "data.template_file.user_data_jammy",
            "data.template_file.user_data_xenial",
            "openstack_networking_floatingip_v2.fip_1"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "openstack_networking_floatingip_v2",
      "name": "fip_1",
      "provider": "provider[\"registry.terraform.io/terraform-provider-openstack/openstack\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "address": "192.168.13.53",
            "all_tags": [],
            "description": "",
            "dns_domain": "",
            "dns_name": "",
            "fixed_ip": "",
            "id": "f6848752-8a40-47c0-bfaf-f98fba6439bc",
            "pool": "public",
            "port_id": "",
            "region": "RegionOne",
            "subnet_id": null,
            "subnet_ids": null,
            "tags": [],
            "tenant_id": "5404f2392cee45e7a684348c371cf6db",
            "timeouts": null,
            "value_specs": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwfX0="
        }
      ]
    }
  ],
  "check_results": null
}
