#cloud-config
password: ${vm_pass}
chpasswd: { expire: False }
ssh_pwauth: True
hostname: ${vm_uname}
manage_etc_hosts: true

write_files:

  - path: /etc/update-motd.d/99-ulak-message
    permissions: '0755'
    content: |
      #!/bin/bash
      echo ""
      echo "░█░█░█░░░█▀█░█░█░░░█░█░█▀█░█▀▄░█▀▀░█▀▄░█░░░█▀▀░█▀▀░█▄█░█▀▀"
      echo "░█░█░█░░░█▀█░█▀▄░░░█▀█░█▀█░█▀▄░█▀▀░█▀▄░█░░░█▀▀░▀▀█░█░█░█▀▀"
      echo "░▀▀▀░▀▀▀░▀░▀░▀░▀░░░▀░▀░▀░▀░▀▀░░▀▀▀░▀░▀░▀▀▀░▀▀▀░▀▀▀░▀░▀░▀▀▀"
      echo ""
      echo "############################################ GELISTIRICIYE NOT ###############################################"
      echo ""
      echo "* Eğer makineyi yeni oluşturduysanız, programların tam olarak kurulabilmesi için yaklaşık 10 dakika bekleyin!"
      echo "* Arka planda programların kurulumunu izlemek için /var/log/cloud-init-output.log dosyasına bakabilirsiniz."
      echo "* Programlar kurulduktan sonra makineyi kullanmaya başlayabilirsiniz."
      echo ""
      echo "###############################################################################################################"

  - path: /var/cache/installation_test.sh
    owner: root:root
    permissions: '0755'
    content: |
      #!/bin/bash
      echo "-------------------------------------------- INSTALLATION START -----------------------------------------------------"
      
      
      # added ulak nameserver
      sudo sed -i 's/^nameserver .*/nameserver 192.168.10.12/' /etc/resolv.conf

      # Zaman dilimi ayarlanıyor
      echo "____________________________________________ SETTING DATE/TIME ______________________________________________________"
      sudo timedatectl set-ntp yes
      sudo timedatectl set-timezone "Asia/Istanbul"

      # added new user
      echo "-------------------------------------------- USER CONFIG START ------------------------------------------------------"

      useradd -m -s /bin/bash ${vm_uname}
      echo ${vm_uname}:${vm_pass} | sudo chpasswd
      echo "${vm_uname}  ALL=(ALL:ALL) ALL" | sudo tee --append /etc/sudoers
      echo ${fipp}
      echo ${nfs_ip}
      echo "_____________________________________________________________________________________________________ USER CONFIG END"

      echo "-------------------------------------------- COMMON SOFTWARE INSTALLATION START -------------------------------------"
      apt-get update -y
      apt-get upgrade -y
      #apt-get install -y ${common_packages}
      apt-get install -y ${join(",", local.common_packages)}
      echo "____________________________________________________________________________________ COMMON SOFTWARE INSTALLATION END"

      echo "-------------------------------------------- Dinamik IP adresi alarak ağ kartları ayaklandırılıyor ------------------"
      sudo dhclient

      # If Docker is in the packages list, install Docker
      if [[ "${packages}" == *"DESKTOP"* ]]; then
        echo "-------------------------------------------- UBUNTU-DESKTOP INSTALLATION START -------------------------------------"
        sudo apt install ubuntu-desktop
        sudo apt install xrdp
        sudo ufw allow 3389
        sudo reboot
        echo "___________________________________________________________________________________ UBUNTU-DESKTOP INSTALLATION START"
      fi

      # If Docker is in the packages list, install Docker
      if [[ "${packages}" == *"Docker"* ]]; then
        echo "-------------------------------------------- DOCKER INSTALLATION START --------------------------------------------"
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        sudo apt-get update
        apt-cache policy docker-ce
        apt-get install -y docker-ce
        curl -L https://github.com/docker/compose/releases/download/1.18.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

        cat <<EOF | sudo tee /etc/docker/daemon.json
        {
          "insecure-registries": ["registry.ulakhaberlesme.com.tr"],
          "exec-opts": ["native.cgroupdriver=systemd"],
          "log-driver": "json-file",
          "log-opts": {
            "max-size": "100m"
          },
          "storage-driver": "overlay2"
        }
        EOF
        sudo systemctl enable docker
        sudo systemctl daemon-reload
        sudo systemctl start docker
        sudo systemctl restart docker
        echo "_________________________________________________________________________________________ DOCKER INSTALLATION ENDED"
      fi

      # If Kubernetes is in the packages list, install Kubernetes
      if [[ "${packages}" == *"Kubernetes"* ]]; then
        echo "-------------------------------------------- K8S INSTALLATION STARTED ---------------------------------------------"
        swapoff -a
        sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

        cat <<EOL | sudo tee /etc/modules-load.d/containerd.conf
        overlay
        br_netfilter
        EOL

        sudo modprobe overlay
        sudo modprobe br_netfilter

        cat <<EOL | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
        net.bridge.bridge-nf-call-iptables  = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward                 = 1
        EOL

        sudo sysctl --system
        mkdir -p /etc/apt/keyrings
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list

        apt update
        apt install -y kubelet kubeadm kubectl
        apt-mark hold kubelet kubeadm kubectl

        curl -L https://dl.k8s.io/release/v1.23.17/bin/linux/amd64/kubectl -o /tmp/kubectl && chmod +x /tmp/kubectl && mv /tmp/kubectl /usr/bin
        curl -L https://dl.k8s.io/release/v1.23.17/bin/linux/amd64/kubeadm -o /tmp/kubeadm && chmod +x /tmp/kubeadm && mv /tmp/kubeadm /usr/bin
        curl -L https://dl.k8s.io/release/v1.23.17/bin/linux/amd64/kubelet -o /tmp/kubelet && chmod +x /tmp/kubelet && mv /tmp/kubelet /usr/bin

        systemctl restart kubelet

        kubectl version
        kubeadm version
        kubelet --version

        echo "-------------------------------------------- KUBEADM INIT START ---------------------------------------------------"
        sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --v=5 --ignore-preflight-errors=all
        echo "__________________________________________________________________________________________________ KUBEADM INIT END"

        echo "-------------------------------------------- KUBECTL MKDIR START --------------------------------------------------"
        sudo mkdir -p /home/${vm_uname}/.kube
        sudo cp -i /etc/kubernetes/admin.conf /home/${vm_uname}/.kube/config
        sudo chown ${vm_uname}:${vm_uname} /home/${vm_uname}/.kube/config
        echo "_________________________________________________________________________________________________ KUBECTL MKDIR END"

        echo "-------------------------------------------- KUBECTL ROOT MKDIR START ---------------------------------------------"
        sudo mkdir -p /root/.kube
        sudo cp -i /etc/kubernetes/admin.conf /root/.kube/config
        sudo chown root:root /root/.kube/config
        echo "__________________________________________________________________________________________ KUBECTL ROOT MKDIR ENDED"

        echo "-------------------------------------------- KUBECTL MKDIR START --------------------------------------------------"
        sudo mkdir -p /.kube
        sudo cp -i /etc/kubernetes/admin.conf /.kube/config
        sudo chown ${vm_uname}:${vm_uname} /.kube/config
        echo "_________________________________________________________________________________________________ KUBECTL MKDIR END"

        kubectl --kubeconfig /.kube/config apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
        kubectl --kubeconfig /.kube/config taint nodes --all node-role.kubernetes.io/master-

        echo "-------------------------------------------- UPDATE BASHRC START --------------------------------------------------"
        # Fonksiyon tanımla: Kubectl alias'larını ekle
        add_kubectl_aliases() {
            local file="$1"
            cat <<EOF >> "$file"
            alias k="kubectl"
            alias kp="kubectl get pods"
            alias kd="kubectl describe"
            alias kl="kubectl logs"
            alias kg="kubectl get"
            alias keit="kubectl exec -it"

            alias k5="kubectl -n \$(kubectl get namespaces -o jsonpath='{.items[*].metadata.name}' | grep '5gcn-deployment')"
            alias k5p="k5 get pods"
            alias k5d="k5 describe"
            alias k5l="k5 logs"

            alias km="kubectl -n monitoring"
            alias kmp="km get pods"
            alias kmd="km describe"
            alias kml="km logs"
            EOF
        }

        # /home dizinindeki .bashrc dosyalarını güncelle
        find /home -type f -name ".bashrc" -exec bash -c 'add_kubectl_aliases "$0"' {} \;

        # /root dizinindeki .bashrc dosyalarını güncelle
        find /root -type f -name ".bashrc" -exec bash -c 'add_kubectl_aliases "$0"' {} \;

        echo "_________________________________________________________________________________________________ UPDATE BASHRC END"
        echo "____________________________________________________________________________________________ K8s INSTALLATION ENDED"
      fi


      if [[ "${packages}" == *"Helm"* ]]; then
        echo "-------------------------------------------- HELM INSTALLATION START ----------------------------------------------"
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        chmod +x get_helm.sh
        ./get_helm.sh
        helm repo add chartmuseum http://helmchart.ulakhaberlesme.com.tr
        helm repo update
        echo "___________________________________________________________________________________________ HELM INSTALLATION ENDED"
      fi


      if [[ "${packages}" == *"Docker"* ]]; then
        echo "-------------------------------------------- DOCKER GROUP START ---------------------------------------------------"
        groupadd docker
        sudo chmod 777 /var/run/docker.sock
        sudo usermod -aG docker ${vm_uname}
        echo "__________________________________________________________________________________________________ DOCKER GROUP END"
      fi

      echo "---------------------------------------------- NFS CONFIGURATION START ----------------------------------------------"
      # Configure NFS to allow data storage from new VM
      sshpass -p ${nfs_password} ssh -o StrictHostKeyChecking=no ${nfs_username}@${nfs_ip} 'echo "/mnt/nfs ${fipp}(rw,sync,no_root_squash,no_subtree_check)" >> /etc/exports'
      sshpass -p ${nfs_password} ssh -o StrictHostKeyChecking=no ${nfs_username}@${nfs_ip} 'sudo exportfs -a'
      echo "_______________________________________________________________________________________________ NFS CONFIGURATION END"


      if [[ "${packages}" == *"Helm"* ]]; then
        echo "-------------------------------------------- CLONE HELMCHART REPO START -------------------------------------------"
        # Clone HelmChart Repository
        git clone http://${gitlab_token_name}:${gitlab_token}@gitlab.ulakhaberlesme.com.tr/DevOps/5gcn-helmchart.git 5gcn_helmchart

        # Apply NFS Provisioner Pod
        cd /5gcn_helmchart/nfs-provisioner && kubectl --kubeconfig /.kube/config apply -k .
        echo "__________________________________________________________________________________________ CLONE HELMCHART REPO END"

        echo "-------------------------------------------- UPDATE BASHRC for HELM - START ---------------------------------------"

        # Fonksiyon tanımla: Kubectl alias'larını ekle
        add_helm_aliases() {
            local file="$1"
            cat <<EOF >> "$file"
            alias hi="helm install"
            alias hu="helm uninstall"

            alias hm="helm -n monitoring"
            alias hmi="hm install"
            alias hmu="hm uninstall"
            EOF
        }

        # /home dizinindeki .bashrc dosyalarını güncelle
        find /home -type f -name ".bashrc" -exec bash -c 'add_helm_aliases "$0"' {} \;

        # /root dizinindeki .bashrc dosyalarını güncelle
        find /root -type f -name ".bashrc" -exec bash -c 'add_helm_aliases "$0"' {} \;

        echo "_____________________________________________________________________________________ UPDATE BASHRC  for HELM - END"
      fi

      if [[ "${packages}" == *"Kubernetes"* ]]; then
        echo "-------------------------------------------- UPDATE KUBELET CONFIG START ------------------------------------------"
        wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 && chmod +x /usr/local/bin/yq
        yq eval -i '.spec.containers[0].command += "--service-node-port-range=30000-39000"' /etc/kubernetes/manifests/kube-apiserver.yaml
        systemctl restart kubelet
        echo "_________________________________________________________________________________________ UPDATE KUBELET CONFIG END"

        echo "-------------------------------------------- COPY .kube DIRECTORY TO THE OTTHER USERS HOME DIRECTORIES ------------"
        # /root/.kube Dizinini diğer kullanıcılara kopyalayarak onların da kubectl komutlarını kurulu k8s düğümünde çalıştırması sağlanacak
        sudo rsync -ai --chown=${vm_uname} ~root/.kube ~${vm_uname}/
        sudo rsync -ai --chown=ubuntu ~root/.kube ~ubuntu/
      fi

      if [[ "${packages}" == *"Helm"* ]]; then
        echo "-------------------------------------------- HELM REPO CONFIG START -----------------------------------------------"
        mkdir -p /root/.config/helm
        mkdir -p /root/.cache/helm
        sudo cp -R /.config/helm/* /root/.config/helm
        sudo cp -R /.cache/helm/* /root/.cache/helm
        sudo chmod 777 /root/.config/helm/*
        sudo chmod 777 /root/.cache/helm/*

        mkdir -p /home/${vm_uname}/.config/helm
        mkdir -p /home/${vm_uname}/.cache/helm
        sudo cp -R /.config/helm/* /home/${vm_uname}/.config/helm
        sudo cp -R /.cache/helm/* /home/${vm_uname}/.cache/helm
        sudo chmod 777 /home/${vm_uname}/.config/helm/*
        sudo chmod 777 /home/${vm_uname}/.cache/helm/*
        echo "______________________________________________________________________________________________ HELM REPO CONFIG END"
      fi

      echo "____________________________________________________________________________________________________ INSTALLATION END"


runcmd:
 - [ sh, "/var/cache/installation_test.sh" ]
